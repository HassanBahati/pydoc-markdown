{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Pydoc Markdown documentation! v4.6.3-19-g5f61668 (develop) Pydoc-Markdown is a tool to create Python API documentation in Markdown format. Instead of executing your Python code like so many other documentation tools, it parses it using docspec instead. To run Pydoc-Markdown, you need to use at least Python 3.7. >> Go to the Documentation Installation I recommend to install Pydoc-Markdown using Pipx. $ pipx install novella $ pipx inject novella pydoc-markdown[novella] If you need access to the Pydoc-Markdown CLI instead, because you rely on the \"old-style\" pre-4.6.0 YAML configuration, you should install the package directly through Pipx. $ pipx install pydoc-markdown Note: You can also use pipx install pydoc-markdown[novella] --include-deps , but be aware that this also adds other programs in Pydoc-Markdown's dependency tree to your PATH. Features Understands multiple documentation styles (Sphinx, Google, Pydoc-Markdown specific) and converts them to properly formatted Markdown Can parse docstrings for variables thanks to docspec ( #: block before or string literal after the statement) Generates links to other API objects per the documentation syntax (e.g. #OtherClass for the Pydoc-Markdown style) News Starting with 4.6.0 , development focuses on integrating with Novella and use it as a replacement for tool-specific renderers thus far provided directly by Pydoc-Markdown (i.e. integrations with MkDocs, Hugo and Docusuraus). Such integrations are/will be provided by Novella instead. With the Novella integration, you can now place generated API content in Markdown format inline with your existing Markdown documentation source files using @pydoc tags. Check out the Documentation for more information on how to use Pydoc-Markdown with Novella. The old style of using Pydoc-Markdown with a YAML or PyProject configuration to generate files and kick off the build is now deprecated but will be maintained for the foreseeable future (at least until the next major version bump). It is strongly recommended to migrate your existing projects to using the Novella build backend. Contributing to Pydoc-Markdown All contributions are welcome! Check out the Contribution Guidelines . Questions / Need help? Feel free to open a topic on GitHub Discussions !","title":"Home"},{"location":"#welcome-to-the-pydoc-markdown-documentation-v463-19-g5f61668-develop","text":"Pydoc-Markdown is a tool to create Python API documentation in Markdown format. Instead of executing your Python code like so many other documentation tools, it parses it using docspec instead. To run Pydoc-Markdown, you need to use at least Python 3.7. >> Go to the Documentation","title":"Welcome to the Pydoc Markdown documentation! v4.6.3-19-g5f61668 (develop)"},{"location":"#installation","text":"I recommend to install Pydoc-Markdown using Pipx. $ pipx install novella $ pipx inject novella pydoc-markdown[novella] If you need access to the Pydoc-Markdown CLI instead, because you rely on the \"old-style\" pre-4.6.0 YAML configuration, you should install the package directly through Pipx. $ pipx install pydoc-markdown Note: You can also use pipx install pydoc-markdown[novella] --include-deps , but be aware that this also adds other programs in Pydoc-Markdown's dependency tree to your PATH.","title":"Installation"},{"location":"#features","text":"Understands multiple documentation styles (Sphinx, Google, Pydoc-Markdown specific) and converts them to properly formatted Markdown Can parse docstrings for variables thanks to docspec ( #: block before or string literal after the statement) Generates links to other API objects per the documentation syntax (e.g. #OtherClass for the Pydoc-Markdown style)","title":"Features"},{"location":"#news","text":"Starting with 4.6.0 , development focuses on integrating with Novella and use it as a replacement for tool-specific renderers thus far provided directly by Pydoc-Markdown (i.e. integrations with MkDocs, Hugo and Docusuraus). Such integrations are/will be provided by Novella instead. With the Novella integration, you can now place generated API content in Markdown format inline with your existing Markdown documentation source files using @pydoc tags. Check out the Documentation for more information on how to use Pydoc-Markdown with Novella. The old style of using Pydoc-Markdown with a YAML or PyProject configuration to generate files and kick off the build is now deprecated but will be maintained for the foreseeable future (at least until the next major version bump). It is strongly recommended to migrate your existing projects to using the Novella build backend.","title":"News"},{"location":"#contributing-to-pydoc-markdown","text":"All contributions are welcome! Check out the Contribution Guidelines .","title":"Contributing to Pydoc-Markdown"},{"location":"#questions-need-help","text":"Feel free to open a topic on GitHub Discussions !","title":"Questions / Need help?"},{"location":"changelog/","text":"Changelog Unreleased Type Description PR Issues Author Improvement add explicit compatibility with Novella 0.2.x (`>=0.1.10, < 0.3.0`) @NiklasRosenstein Docs Fix installation instructions using Pipx (#256) 256 @NiklasRosenstein Fix fix interpreting Markdown in-document anchor links as cross references 274 @NiklasRosenstein 4.6.3 (2022-03-13) Type Description PR Issues Author Fix fix subscript error for type annotation in Python < =3.8 @NiklasRosenstein 4.6.2 (2022-03-13) Type Description PR Issues Author Fix fix AttributeError when using a Git source linker with `use_branch` disabled 252 250 @NiklasRosenstein Hygiene remove unused functions that interact with Git since the same functionality from the `nr.utils.git` module is used instead now 252 @NiklasRosenstein 4.6.1 (2022-03-05) Type Description PR Issues Author Fix fix recognition of overwritten values in `MarkdownRenderer.header_level_by_type` 249 248 @NiklasRosenstein Fix fix backwards compat of handling `\"Data\"` key in `MarkdownRenderer.header_level_by_type` when now it should be `\"Variable\"` 249 @NiklasRosenstein 4.6.0 (2022-03-02) Type Description PR Issues Author Docs docusaurus: Update `plugin-content-docs` config for docusarus@beta to not exclude files and folders with underscores. 235 189 @chrisstetter Hygiene remove `MarkdownRenderer.classdef_render_init_signature_if_needed` option because it never worked to begin with 245 @NiklasRosenstein Breaking change remove `MarkdownRenderer.render_to_stream()` from public api 245 @NiklasRosenstein Feature add `pydoc_markdown.interfaces.SingleObjectRenderer` and use it in Novella `@pydoc` tag processor 245 @NiklasRosenstein Feature add `ApiSuite` class and `ResolverV2` which is used by the new `@pydoc` tag preprocessor when using Novella 245 @NiklasRosenstein Feature `MarkdownReferenceResolver` now implements the new `ResolverV2` interface and can resolve references globally 245 @NiklasRosenstein Feature `CrossRefProcessor` now accepts a `resolver_v2` argument to use instead of the `resolver` object passed through the `Processor` API 245 @NiklasRosenstein Feature bring back formatting function, class and variable signatures with YAPF. (Tagging @lgeiger as the author because he was the original author of the feature in a previous version of Pydoc-Markdown, see https://github.com/NiklasRosenstein/pydoc-markdown/pull/78) 245 244 @lgeiger Fix fix forwarding of `PluginBase.init()` calls to sub-plugins in unittests and `DocusaurusRenderer` 245 @NiklasRosenstein Improvement do not render link to source for modules in `MarkdownRenderer` 245 @NiklasRosenstein Improvement Git source linkers now fall back to the SHA if the current branch is invalid (e.g. in a detached HEAD state) and logs a warning @NiklasRosenstein 4.5.1 (2022-02-28) Type Description PR Issues Author Fix hugo: Hugo now respects the baseUrl option @Heiss @NiklasRosenstein Docs docusaurus: Update `plugin-content-docs` config for docusarus@beta to not exclude files and folders with underscores. 189 @chrisstetter Fix hugo: Adds Apple Silicon to Hugo's recognized architectures. @MilesCranmer Fix databind >1.4.0 changed Location.format() 246 @NiklasRosenstein 4.5.0 (2021-12-12) Type Description PR Issues Author Feature MarkdownRenderer: Add `render_page_title` option. 214 , 216 @t6847kimo Feature git: Git source linkers now have a `use_branch` option to use the current branch name instead of the current commit SHA when generating links to the source code 218 @NiklasRosenstein 4.4.0 (2021-12-12) Type Description PR Issues Author Fix Sphinx processor now triggers when `:arg` or other Sphinx keywords are encountered in a docstring 221 @NiklasRosenstein Tests Refactor sphinx processor tests and add new test for param keyword only. Fixes minor issue with argument only docstring. @gmarks2149 @NiklasRosenstein Fix sphinx_processor: Fix multi-line parameter sphinx docstring rendering issue by switching to docstring-parser to parse the docstrings. @gmarks2149 195 @NiklasRosenstein Fix Fix configuration generated with `--bootstrap mkdocs` 230 @gethvi Feature HugoRenderer: add `serverURL` and `serverPort` options to `$.renderer.config` block to allow overwriting the URL where the local Hugo server serves from 202 , 231 @melMass Feature add `GitlabSourceLinker` class (entrypoint name: `gitlab`). @Heiss @NiklasRosenstein Feature MarkdownRenderer: add `render_typehint_in_data_header` option to `MarkdownRenderer` 229 @NiklasRosenstein Fix MarkdownRenderer: no longer escape markdown in headers when `html_headers` is enabled (used to result in additional backslashes when interpreted by most Markdown to HTML renderers) @NiklasRosenstein 4.3.2 (2021-09-04) Type Description PR Issues Author Fix minimum `click` version is `7.1`, allow also `8.x` @NiklasRosenstein 4.3.1 (2021-09-01) Type Description PR Issues Author Fix Calling pydoc-markdown with `--render-toc` option causes an exception 213 @NiklasRosenstein 4.3.0 (2021-08-28) Type Description PR Issues Author Fix fix use of `docspec.ApiObject.path` after we migrated away from using deprecated `docspec.ReverseMap` @NiklasRosenstein Improvement change default configuration of `MarkdownRenderer` (`signature_with_vertical_bar = False` (many people seemed to dislike that) and `signature_with_def = True` (for consistency with the included `class` keyword for classes)) @NiklasRosenstein 4.2.0 (2021-08-20) Type Description PR Issues Author Fix HugoRenderer: Enable Hugo `markup.goldmark.renderer.unsafe` option by default 198 @NiklasRosenstein Fix MarkdownRenderer: Markdown renderer produces header anchors with `name` attribute instead of `id` 200 @NiklasRosenstein Feature MarkdownRenderer: @melMass added the `MarkdownRenderer.add_module_prefix` option 199 @NiklasRosenstein Docs switch Pydoc-Markdown to generated its docs with MkDocs @NiklasRosenstein Docs add Jinja2 renderer documentation in generated docs @NiklasRosenstein Improvement update template for `--bootstrap readthedocs` and related documentation @NiklasRosenstein Fix fix `mkdocs` bootstrap configuration, update mkdocs and hugo bootstrap config to include example on how to select parts of the API docs @NiklasRosenstein 4.1.6 (2021-08-09) Type Description PR Issues Author Fix HugoRenderer: Restore old behaviour for `HugoConfig.additional_options`, which should be deserialized flat (i.e. it takes on any additional options in the same object that can not be mapped to any other fields of the config object) @NiklasRosenstein 4.1.5 (2021-08-04) Type Description PR Issues Author Fix fix import from `databind.core` @NiklasRosenstein 4.1.4 (2021-08-04) Type Description PR Issues Author Fix remove unused dependency on `nr.collections` @NiklasRosenstein Improvement Use `tempfile` instead of `nr.fs` @NiklasRosenstein 4.1.3 (2021-07-24) Type Description PR Issues Author Fix MarkdownRenderer: Remove zombie line that triggers error when using the Markdown renderer directly 196 @NiklasRosenstein 4.1.2 (2021-07-23) Type Description PR Issues Author Fix fix `--render-toc` option @NiklasRosenstein Feature Jinja2Renderer: add `blockquote` and `describe` built-in filters @NiklasRosenstein 4.1.1 (2021-07-22) Type Description PR Issues Author Improvement Jinja2Renderer: added `format_function_signature` filter @NiklasRosenstein 4.1.0 (2021-07-22) Type Description PR Issues Author Fix CrossrefProcessor: missing trailing characters for unresolved crossref @NiklasRosenstein Improvement MarkdownRenderer: add MarkdownReferenceResolver helper class @NiklasRosenstein Feature Add `jinja2` renderer @NiklasRosenstein 4.0.1 (2021-07-22) Type Description PR Issues Author Fix fix Python version classifiers @NiklasRosenstein 4.0.0 (2021-07-22) Type Description PR Issues Author Breaking change Migrate to `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databin.json` and uses of `nr.interface` are replaced with ABCs. If you developed plugins for Pydoc-Markdown, please follow the guide at https://pydoc-markdown.readthedocs.io/en/latest/docs/migrate-from-3x-to-4x/. @NiklasRosenstein Fix docusaurus: Insert an additional newline after header anchors (` `) when `MarkdownRenderer.insert_header_anchors` is enabled to fix Docusaurus header rendering. @NiklasRosenstein Fix unset `__PYENV_LAUNCHER__` environment variable for commands invoked via `$.hooks.pre-render` and `$.hooks.post-render` to avoid issues when the hook invokes a script installed into a different Python virtualenv than the virtualenv that is currently active in the terminal @NiklasRosenstein Improvement Pydoc-Markdown now requires Python 3.7 or newer (before it was 3.6 or newer). This is due to `databind.core` having that minimum version requirement @NiklasRosenstein 3.14.0 (2021-07-19) Type Description PR Issues Author Feature add `MarkdownRenderer.signature_with_vertical_bar` option (contributed by @t6847kimo) 192 @NiklasRosenstein 3.13.0 (2021-05-29) Type Description PR Issues Author Improvement upgrade to `docspec-python~0.2.0` @NiklasRosenstein 3.12.1 (2021-05-21) Type Description PR Issues Author Fix add missing `dataclasses` dependency for Python 3.6 compatibility @NiklasRosenstein Fix set minimum Python version in `package.yml` to `^3.6` @NiklasRosenstein 3.12.0 (2021-05-21) Type Description PR Issues Author Feature SphinxProcessor: parse `type` and `rtype` 157 @NiklasRosenstein 3.11.0 (2021-05-20) Type Description PR Issues Author Feature Add support for getting configuration from pyproject.toml under the [tool.pydoc-markdown] table @NiklasRosenstein Fix fix docstring in PydocmdPreprocessor @NiklasRosenstein 3.10.3 (2021-05-09) Type Description PR Issues Author Fix sort sidebar items in docusaurus 183 @NiklasRosenstein Fix replace backslashes with forward slashes in docusaurus sidebar (actually in 3.10.2) 129 @NiklasRosenstein 3.10.1 (2021-04-02) Type Description PR Issues Author Fix fix code blocks indentation in `SphinxProcessor` 179 @NiklasRosenstein 3.10.0 (2021-02-20) Type Description PR Issues Author Feature add `PythonLoader.encoding` option @NiklasRosenstein 3.9.0 (2020-12-15) Type Description PR Issues Author Fix Fix `IndexError` while processing short module path (by @g6123) 167 @NiklasRosenstein Improvement bump `watchdog` dependency to `^1.0.0` @NiklasRosenstein 3.8.0 (2020-11-06) Type Description PR Issues Author Feature add new `bitbucket` source linker (@hkenny, #163) @NiklasRosenstein 3.7.0 (2020-11-05) Type Description PR Issues Author Improvement FilterProcessor: Fix `NameError: name _check is not defined`, slightly alter behaviour of `FilterProcessor.expression` field` 161 @NiklasRosenstein 3.6.1 (2020-11-03) Type Description PR Issues Author Fix Fix using `data_code_block` option in `MarkdownRenderer`, and add a unit test for it 160 @NiklasRosenstein 3.6.0 (2020-10-28) Type Description PR Issues Author Feature Add `git` and `gitea` source linker (@tboulogne, #158) @NiklasRosenstein Improvement Update Docusaurus sidebar generation (@m-vdb, #156) @NiklasRosenstein 3.5.0 (2020-09-04) Type Description PR Issues Author Feature docusaurus: Add new `docusaurus` Renderer (contributed to by @m-vdb) 151 , 147 @NiklasRosenstein Improvement markdown: Remove `MarkdownRenderer.fp` option, add `MarkdownRenderer.render_to_stream()` @NiklasRosenstein Feature filter: add `FilterProcessor.skip_empty_modules` option @NiklasRosenstein Feature markdown: Add `MarkdownRenderer.render_module_header_template` and `.escape_html_in_docstring` options @NiklasRosenstein Feature cli: Add `--bootstrap docusaurus` option @NiklasRosenstein 3.4.0 (2020-08-31) Type Description PR Issues Author Feature mkdocs: add `server_port` option, treat `MKDOCS_PORT` environment variable if `server_port` option is not set 148 @NiklasRosenstein 3.3.1 (2020-08-29) Type Description PR Issues Author Fix markdown: Fix \"list\" object has no attribute \"values\" in `MarkdownRenderer` 149 @NiklasRosenstein 3.3.0 (2020-07-17) Type Description PR Issues Author Feature plugin types can now be resolved by their FQN (i.e. the absolute import name, such as `pydoc_markdown.contrib.loaders.python.PythonLoader`) in addition to their registered entrypoint name. 131 @NiklasRosenstein Feature add new `SourceLinker` interface @NiklasRosenstein Feature add `GitHubSourceLinker` class (entrypoint name: `github`) @NiklasRosenstein Feature markdown: add `MarkdownRenderer.source_linker`, `.source_position` and `.source_format` options 122 @NiklasRosenstein Improvement cli: `-v,--verbose` and `-q,--quiet` flags are now countable (e.g. `-vv` will raise the logging verbosity to `DEBUG`) @NiklasRosenstein Improvement internal: Ensure consistency independent of the CWD from which Pydoc-Markdown is invoked as long as the same configuration file is used by introduce the `Context` object and the `init()` method for plugins. The `Context.directory` is set to the parent directory of the `pydoc-markdown.yml` configuration file. Plugins use that directory to interpret relative paths instead of the current working directory. @NiklasRosenstein Feature implement YTT-like YAML preprocessing when the Pydoc-Markdown configuration is loaded @NiklasRosenstein 3.2.0.post1 (2020-07-15) Type Description PR Issues Author Fix packaging: add `$.readme` to `pydoc-markdown/package.yaml`, fixing the generated `setup.py` to include the `README.md` from the parent folder. 130 @NiklasRosenstein 3.2.0 (2020-07-13) Type Description PR Issues Author Feature cli: add `--dump` and `--with-processors/--without-processors` options @NiklasRosenstein Docs add docstrings to classes defined in `pydoc_markdown.contrib.processors` @NiklasRosenstein Improvement use `docspec` module instead of `pydoc_markdown.reflection` to represent API objects @NiklasRosenstein Improvement python: use `docspec-python` to load Python API objects @NiklasRosenstein Improvement crossref: warnings produced about references that cannot be resolved are now summarized in a single log-line @NiklasRosenstein Improvement With the removal of `pydoc_markdown.reflection`, the `ModuleGraph` class has also been removed and replaced by List[docspec.Module]` @NiklasRosenstein Improvement filter: Rename FilterProcessor.include_root_objects to .do_not_filter_modules @NiklasRosenstein Improvement change type signatures and some method names of interfaces in `pydoc_markdown.interfaces` @NiklasRosenstein Improvement utils: The `Page.filtered_modules()` method now warns if an element in `Page.contents` did not match an API object @NiklasRosenstein Fix markdown: the Markdown header level for methods is now correctly read from the \"Method\" key in `MarkdownRenderer.header_level_by_type` 121 @NiklasRosenstein Improvement cli: remove `--bootstrap-mkdocs` in favor of `--bootstrap` option which now accepts an argument @NiklasRosenstein Improvement cli: the `--bootstrap` option now requires an argument, which must be either \"base\", \"mkdocs\" or \"hugo\" (new) @NiklasRosenstein Feature mkdocs: The `MkdocsRenderer.clean_render` option is enabled again by default, but instead of removing the whole `content_directory`, it will instead only remove files that it has previously generated (it will place a `.generated-files.txt` file in the `output_directory` for that). @NiklasRosenstein Feature cli: add `MarkdownRenderer.classdef_with_decorators` and `MarkdownRenderer.signature_with_decorators` options @NiklasRosenstein Feature Add new `HugoRenderer` (YAML type name `hugo`). 106 @NiklasRosenstein Feature smart-processor: now looks for a `@doc:fmt: ` string in the docstring, which can be used to override the style that is used in case the automatically detected style is incorrect @NiklasRosenstein Docs The Pydoc-Markdown documentation is now available on Read the Docs (https://pydoc-markdown.readthedocs.io/en/latest/) @NiklasRosenstein Feature api: Add new `Builder` interface that is used with the new `--build` and `--site-dir` options @NiklasRosenstein Feature mkdocs: Implement `Builder` interface for `MkDocsRenderer` @NiklasRosenstein Feature hugo: Implement `Builder` interface for `HugoRenderer` @NiklasRosenstein Feature cli: Add new `--build` and `--site-dir` options as well as `--bootstrap readthedocs` @NiklasRosenstein Fix mkdocs: Fix error in MkDocs navigation generation if a page has no `source` and no `contents` @NiklasRosenstein Improvement mkdocs: generated `mkdocs.yml` now uses forward slashes for filenames on Windows system to increase portability 129 @NiklasRosenstein Feature add new `$.hooks.pre-render` and `$.hooks.post-render` options 112 @NiklasRosenstein 3.1.1 (2020-06-26) Type Description PR Issues Author Improvement dependencies: bump dependency on `nr.databind.core` to `~0.0.18` to avoid picking up the bad `0.0.17` version 126 @NiklasRosenstein 3.1.0 (2020-06-04) Type Description PR Issues Author Improvement cli: rename `--watch-and-serve` option to `--server` @NiklasRosenstein Improvement cli: watch and serve mainloop now reloads the config file and does not open the browser another time if it was already opened once. @NiklasRosenstein Fix cli: fix `pydoc-markdown.yml` generated with `--bootstrap` 118 @NiklasRosenstein Improvement markdown: * change default for `header_level_by_type` (`2` to `1` for modules, `3` to `2` for classes). * change default for `descriptive_class_title` (`false` to `true`) @NiklasRosenstein Feature markdown: added `content_directory` option (replaces hardcoded default `docs` value, defaults to `content` now) @NiklasRosenstein Improvement markdown: renamed `clean_docs_directory_on_render` to `clean_render` and change the default from `true` to `false`. @NiklasRosenstein Improvement mkdocs: `mkdocs_config` option can now be set to `null` (the renderer will the refrain from writing a `mkdocs.yml` file into the output directory). @NiklasRosenstein Fix python: fix assignments with annotations being ignored by the parser 115 @NiklasRosenstein 3.0.2 (2020-05-16) Type Description PR Issues Author Fix mkdocs: fix `NameError` in `MkdocsRenderer` @NiklasRosenstein 3.0.1 (2020-05-16) Type Description PR Issues Author Feature cli: added `--version` option @NiklasRosenstein Feature cli: added `-p,--package` option (which overrides `PythonLoader.packages`) @NiklasRosenstein Feature utils: added `pydoc_markdown.utils.page` module @NiklasRosenstein Feature cli: added `RenderSession` class to `pydoc_markdown.main` module which makes the cli logic easier to maintain and re-use. @NiklasRosenstein Feature markdown: added hidden `MarkdownRenderer.fp` option @NiklasRosenstein Feature python: added `PythonLoader.packages` option @NiklasRosenstein Improvement python: changed behavior of `PythonLoader.modules` option (it will not only load the module that was explicitly specified and exclude any sub-modules, if applicable). @NiklasRosenstein Improvement cli: dynamically lookup `MarkdownRenderer` configuration from the renderer to support renderers other than `MarkdownRenderer` and `MkdocsRenderer` that supply a `markdown` field that is an instance of `MarkdownRenderer` (so they can be used with `--render-toc` as well). @NiklasRosenstein 3.0.0 (2020-05-12) Type Description PR Issues Author Feature Initial release of Pydoc-Markdown v3. @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"Type Description PR Issues Author Improvement add explicit compatibility with Novella 0.2.x (`>=0.1.10, < 0.3.0`) @NiklasRosenstein Docs Fix installation instructions using Pipx (#256) 256 @NiklasRosenstein Fix fix interpreting Markdown in-document anchor links as cross references 274 @NiklasRosenstein","title":"Unreleased"},{"location":"changelog/#463-2022-03-13","text":"Type Description PR Issues Author Fix fix subscript error for type annotation in Python < =3.8 @NiklasRosenstein","title":"4.6.3 (2022-03-13)"},{"location":"changelog/#462-2022-03-13","text":"Type Description PR Issues Author Fix fix AttributeError when using a Git source linker with `use_branch` disabled 252 250 @NiklasRosenstein Hygiene remove unused functions that interact with Git since the same functionality from the `nr.utils.git` module is used instead now 252 @NiklasRosenstein","title":"4.6.2 (2022-03-13)"},{"location":"changelog/#461-2022-03-05","text":"Type Description PR Issues Author Fix fix recognition of overwritten values in `MarkdownRenderer.header_level_by_type` 249 248 @NiklasRosenstein Fix fix backwards compat of handling `\"Data\"` key in `MarkdownRenderer.header_level_by_type` when now it should be `\"Variable\"` 249 @NiklasRosenstein","title":"4.6.1 (2022-03-05)"},{"location":"changelog/#460-2022-03-02","text":"Type Description PR Issues Author Docs docusaurus: Update `plugin-content-docs` config for docusarus@beta to not exclude files and folders with underscores. 235 189 @chrisstetter Hygiene remove `MarkdownRenderer.classdef_render_init_signature_if_needed` option because it never worked to begin with 245 @NiklasRosenstein Breaking change remove `MarkdownRenderer.render_to_stream()` from public api 245 @NiklasRosenstein Feature add `pydoc_markdown.interfaces.SingleObjectRenderer` and use it in Novella `@pydoc` tag processor 245 @NiklasRosenstein Feature add `ApiSuite` class and `ResolverV2` which is used by the new `@pydoc` tag preprocessor when using Novella 245 @NiklasRosenstein Feature `MarkdownReferenceResolver` now implements the new `ResolverV2` interface and can resolve references globally 245 @NiklasRosenstein Feature `CrossRefProcessor` now accepts a `resolver_v2` argument to use instead of the `resolver` object passed through the `Processor` API 245 @NiklasRosenstein Feature bring back formatting function, class and variable signatures with YAPF. (Tagging @lgeiger as the author because he was the original author of the feature in a previous version of Pydoc-Markdown, see https://github.com/NiklasRosenstein/pydoc-markdown/pull/78) 245 244 @lgeiger Fix fix forwarding of `PluginBase.init()` calls to sub-plugins in unittests and `DocusaurusRenderer` 245 @NiklasRosenstein Improvement do not render link to source for modules in `MarkdownRenderer` 245 @NiklasRosenstein Improvement Git source linkers now fall back to the SHA if the current branch is invalid (e.g. in a detached HEAD state) and logs a warning @NiklasRosenstein","title":"4.6.0 (2022-03-02)"},{"location":"changelog/#451-2022-02-28","text":"Type Description PR Issues Author Fix hugo: Hugo now respects the baseUrl option @Heiss @NiklasRosenstein Docs docusaurus: Update `plugin-content-docs` config for docusarus@beta to not exclude files and folders with underscores. 189 @chrisstetter Fix hugo: Adds Apple Silicon to Hugo's recognized architectures. @MilesCranmer Fix databind >1.4.0 changed Location.format() 246 @NiklasRosenstein","title":"4.5.1 (2022-02-28)"},{"location":"changelog/#450-2021-12-12","text":"Type Description PR Issues Author Feature MarkdownRenderer: Add `render_page_title` option. 214 , 216 @t6847kimo Feature git: Git source linkers now have a `use_branch` option to use the current branch name instead of the current commit SHA when generating links to the source code 218 @NiklasRosenstein","title":"4.5.0 (2021-12-12)"},{"location":"changelog/#440-2021-12-12","text":"Type Description PR Issues Author Fix Sphinx processor now triggers when `:arg` or other Sphinx keywords are encountered in a docstring 221 @NiklasRosenstein Tests Refactor sphinx processor tests and add new test for param keyword only. Fixes minor issue with argument only docstring. @gmarks2149 @NiklasRosenstein Fix sphinx_processor: Fix multi-line parameter sphinx docstring rendering issue by switching to docstring-parser to parse the docstrings. @gmarks2149 195 @NiklasRosenstein Fix Fix configuration generated with `--bootstrap mkdocs` 230 @gethvi Feature HugoRenderer: add `serverURL` and `serverPort` options to `$.renderer.config` block to allow overwriting the URL where the local Hugo server serves from 202 , 231 @melMass Feature add `GitlabSourceLinker` class (entrypoint name: `gitlab`). @Heiss @NiklasRosenstein Feature MarkdownRenderer: add `render_typehint_in_data_header` option to `MarkdownRenderer` 229 @NiklasRosenstein Fix MarkdownRenderer: no longer escape markdown in headers when `html_headers` is enabled (used to result in additional backslashes when interpreted by most Markdown to HTML renderers) @NiklasRosenstein","title":"4.4.0 (2021-12-12)"},{"location":"changelog/#432-2021-09-04","text":"Type Description PR Issues Author Fix minimum `click` version is `7.1`, allow also `8.x` @NiklasRosenstein","title":"4.3.2 (2021-09-04)"},{"location":"changelog/#431-2021-09-01","text":"Type Description PR Issues Author Fix Calling pydoc-markdown with `--render-toc` option causes an exception 213 @NiklasRosenstein","title":"4.3.1 (2021-09-01)"},{"location":"changelog/#430-2021-08-28","text":"Type Description PR Issues Author Fix fix use of `docspec.ApiObject.path` after we migrated away from using deprecated `docspec.ReverseMap` @NiklasRosenstein Improvement change default configuration of `MarkdownRenderer` (`signature_with_vertical_bar = False` (many people seemed to dislike that) and `signature_with_def = True` (for consistency with the included `class` keyword for classes)) @NiklasRosenstein","title":"4.3.0 (2021-08-28)"},{"location":"changelog/#420-2021-08-20","text":"Type Description PR Issues Author Fix HugoRenderer: Enable Hugo `markup.goldmark.renderer.unsafe` option by default 198 @NiklasRosenstein Fix MarkdownRenderer: Markdown renderer produces header anchors with `name` attribute instead of `id` 200 @NiklasRosenstein Feature MarkdownRenderer: @melMass added the `MarkdownRenderer.add_module_prefix` option 199 @NiklasRosenstein Docs switch Pydoc-Markdown to generated its docs with MkDocs @NiklasRosenstein Docs add Jinja2 renderer documentation in generated docs @NiklasRosenstein Improvement update template for `--bootstrap readthedocs` and related documentation @NiklasRosenstein Fix fix `mkdocs` bootstrap configuration, update mkdocs and hugo bootstrap config to include example on how to select parts of the API docs @NiklasRosenstein","title":"4.2.0 (2021-08-20)"},{"location":"changelog/#416-2021-08-09","text":"Type Description PR Issues Author Fix HugoRenderer: Restore old behaviour for `HugoConfig.additional_options`, which should be deserialized flat (i.e. it takes on any additional options in the same object that can not be mapped to any other fields of the config object) @NiklasRosenstein","title":"4.1.6 (2021-08-09)"},{"location":"changelog/#415-2021-08-04","text":"Type Description PR Issues Author Fix fix import from `databind.core` @NiklasRosenstein","title":"4.1.5 (2021-08-04)"},{"location":"changelog/#414-2021-08-04","text":"Type Description PR Issues Author Fix remove unused dependency on `nr.collections` @NiklasRosenstein Improvement Use `tempfile` instead of `nr.fs` @NiklasRosenstein","title":"4.1.4 (2021-08-04)"},{"location":"changelog/#413-2021-07-24","text":"Type Description PR Issues Author Fix MarkdownRenderer: Remove zombie line that triggers error when using the Markdown renderer directly 196 @NiklasRosenstein","title":"4.1.3 (2021-07-24)"},{"location":"changelog/#412-2021-07-23","text":"Type Description PR Issues Author Fix fix `--render-toc` option @NiklasRosenstein Feature Jinja2Renderer: add `blockquote` and `describe` built-in filters @NiklasRosenstein","title":"4.1.2 (2021-07-23)"},{"location":"changelog/#411-2021-07-22","text":"Type Description PR Issues Author Improvement Jinja2Renderer: added `format_function_signature` filter @NiklasRosenstein","title":"4.1.1 (2021-07-22)"},{"location":"changelog/#410-2021-07-22","text":"Type Description PR Issues Author Fix CrossrefProcessor: missing trailing characters for unresolved crossref @NiklasRosenstein Improvement MarkdownRenderer: add MarkdownReferenceResolver helper class @NiklasRosenstein Feature Add `jinja2` renderer @NiklasRosenstein","title":"4.1.0 (2021-07-22)"},{"location":"changelog/#401-2021-07-22","text":"Type Description PR Issues Author Fix fix Python version classifiers @NiklasRosenstein","title":"4.0.1 (2021-07-22)"},{"location":"changelog/#400-2021-07-22","text":"Type Description PR Issues Author Breaking change Migrate to `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databin.json` and uses of `nr.interface` are replaced with ABCs. If you developed plugins for Pydoc-Markdown, please follow the guide at https://pydoc-markdown.readthedocs.io/en/latest/docs/migrate-from-3x-to-4x/. @NiklasRosenstein Fix docusaurus: Insert an additional newline after header anchors (` `) when `MarkdownRenderer.insert_header_anchors` is enabled to fix Docusaurus header rendering. @NiklasRosenstein Fix unset `__PYENV_LAUNCHER__` environment variable for commands invoked via `$.hooks.pre-render` and `$.hooks.post-render` to avoid issues when the hook invokes a script installed into a different Python virtualenv than the virtualenv that is currently active in the terminal @NiklasRosenstein Improvement Pydoc-Markdown now requires Python 3.7 or newer (before it was 3.6 or newer). This is due to `databind.core` having that minimum version requirement @NiklasRosenstein","title":"4.0.0 (2021-07-22)"},{"location":"changelog/#3140-2021-07-19","text":"Type Description PR Issues Author Feature add `MarkdownRenderer.signature_with_vertical_bar` option (contributed by @t6847kimo) 192 @NiklasRosenstein","title":"3.14.0 (2021-07-19)"},{"location":"changelog/#3130-2021-05-29","text":"Type Description PR Issues Author Improvement upgrade to `docspec-python~0.2.0` @NiklasRosenstein","title":"3.13.0 (2021-05-29)"},{"location":"changelog/#3121-2021-05-21","text":"Type Description PR Issues Author Fix add missing `dataclasses` dependency for Python 3.6 compatibility @NiklasRosenstein Fix set minimum Python version in `package.yml` to `^3.6` @NiklasRosenstein","title":"3.12.1 (2021-05-21)"},{"location":"changelog/#3120-2021-05-21","text":"Type Description PR Issues Author Feature SphinxProcessor: parse `type` and `rtype` 157 @NiklasRosenstein","title":"3.12.0 (2021-05-21)"},{"location":"changelog/#3110-2021-05-20","text":"Type Description PR Issues Author Feature Add support for getting configuration from pyproject.toml under the [tool.pydoc-markdown] table @NiklasRosenstein Fix fix docstring in PydocmdPreprocessor @NiklasRosenstein","title":"3.11.0 (2021-05-20)"},{"location":"changelog/#3103-2021-05-09","text":"Type Description PR Issues Author Fix sort sidebar items in docusaurus 183 @NiklasRosenstein Fix replace backslashes with forward slashes in docusaurus sidebar (actually in 3.10.2) 129 @NiklasRosenstein","title":"3.10.3 (2021-05-09)"},{"location":"changelog/#3101-2021-04-02","text":"Type Description PR Issues Author Fix fix code blocks indentation in `SphinxProcessor` 179 @NiklasRosenstein","title":"3.10.1 (2021-04-02)"},{"location":"changelog/#3100-2021-02-20","text":"Type Description PR Issues Author Feature add `PythonLoader.encoding` option @NiklasRosenstein","title":"3.10.0 (2021-02-20)"},{"location":"changelog/#390-2020-12-15","text":"Type Description PR Issues Author Fix Fix `IndexError` while processing short module path (by @g6123) 167 @NiklasRosenstein Improvement bump `watchdog` dependency to `^1.0.0` @NiklasRosenstein","title":"3.9.0 (2020-12-15)"},{"location":"changelog/#380-2020-11-06","text":"Type Description PR Issues Author Feature add new `bitbucket` source linker (@hkenny, #163) @NiklasRosenstein","title":"3.8.0 (2020-11-06)"},{"location":"changelog/#370-2020-11-05","text":"Type Description PR Issues Author Improvement FilterProcessor: Fix `NameError: name _check is not defined`, slightly alter behaviour of `FilterProcessor.expression` field` 161 @NiklasRosenstein","title":"3.7.0 (2020-11-05)"},{"location":"changelog/#361-2020-11-03","text":"Type Description PR Issues Author Fix Fix using `data_code_block` option in `MarkdownRenderer`, and add a unit test for it 160 @NiklasRosenstein","title":"3.6.1 (2020-11-03)"},{"location":"changelog/#360-2020-10-28","text":"Type Description PR Issues Author Feature Add `git` and `gitea` source linker (@tboulogne, #158) @NiklasRosenstein Improvement Update Docusaurus sidebar generation (@m-vdb, #156) @NiklasRosenstein","title":"3.6.0 (2020-10-28)"},{"location":"changelog/#350-2020-09-04","text":"Type Description PR Issues Author Feature docusaurus: Add new `docusaurus` Renderer (contributed to by @m-vdb) 151 , 147 @NiklasRosenstein Improvement markdown: Remove `MarkdownRenderer.fp` option, add `MarkdownRenderer.render_to_stream()` @NiklasRosenstein Feature filter: add `FilterProcessor.skip_empty_modules` option @NiklasRosenstein Feature markdown: Add `MarkdownRenderer.render_module_header_template` and `.escape_html_in_docstring` options @NiklasRosenstein Feature cli: Add `--bootstrap docusaurus` option @NiklasRosenstein","title":"3.5.0 (2020-09-04)"},{"location":"changelog/#340-2020-08-31","text":"Type Description PR Issues Author Feature mkdocs: add `server_port` option, treat `MKDOCS_PORT` environment variable if `server_port` option is not set 148 @NiklasRosenstein","title":"3.4.0 (2020-08-31)"},{"location":"changelog/#331-2020-08-29","text":"Type Description PR Issues Author Fix markdown: Fix \"list\" object has no attribute \"values\" in `MarkdownRenderer` 149 @NiklasRosenstein","title":"3.3.1 (2020-08-29)"},{"location":"changelog/#330-2020-07-17","text":"Type Description PR Issues Author Feature plugin types can now be resolved by their FQN (i.e. the absolute import name, such as `pydoc_markdown.contrib.loaders.python.PythonLoader`) in addition to their registered entrypoint name. 131 @NiklasRosenstein Feature add new `SourceLinker` interface @NiklasRosenstein Feature add `GitHubSourceLinker` class (entrypoint name: `github`) @NiklasRosenstein Feature markdown: add `MarkdownRenderer.source_linker`, `.source_position` and `.source_format` options 122 @NiklasRosenstein Improvement cli: `-v,--verbose` and `-q,--quiet` flags are now countable (e.g. `-vv` will raise the logging verbosity to `DEBUG`) @NiklasRosenstein Improvement internal: Ensure consistency independent of the CWD from which Pydoc-Markdown is invoked as long as the same configuration file is used by introduce the `Context` object and the `init()` method for plugins. The `Context.directory` is set to the parent directory of the `pydoc-markdown.yml` configuration file. Plugins use that directory to interpret relative paths instead of the current working directory. @NiklasRosenstein Feature implement YTT-like YAML preprocessing when the Pydoc-Markdown configuration is loaded @NiklasRosenstein","title":"3.3.0 (2020-07-17)"},{"location":"changelog/#320post1-2020-07-15","text":"Type Description PR Issues Author Fix packaging: add `$.readme` to `pydoc-markdown/package.yaml`, fixing the generated `setup.py` to include the `README.md` from the parent folder. 130 @NiklasRosenstein","title":"3.2.0.post1 (2020-07-15)"},{"location":"changelog/#320-2020-07-13","text":"Type Description PR Issues Author Feature cli: add `--dump` and `--with-processors/--without-processors` options @NiklasRosenstein Docs add docstrings to classes defined in `pydoc_markdown.contrib.processors` @NiklasRosenstein Improvement use `docspec` module instead of `pydoc_markdown.reflection` to represent API objects @NiklasRosenstein Improvement python: use `docspec-python` to load Python API objects @NiklasRosenstein Improvement crossref: warnings produced about references that cannot be resolved are now summarized in a single log-line @NiklasRosenstein Improvement With the removal of `pydoc_markdown.reflection`, the `ModuleGraph` class has also been removed and replaced by List[docspec.Module]` @NiklasRosenstein Improvement filter: Rename FilterProcessor.include_root_objects to .do_not_filter_modules @NiklasRosenstein Improvement change type signatures and some method names of interfaces in `pydoc_markdown.interfaces` @NiklasRosenstein Improvement utils: The `Page.filtered_modules()` method now warns if an element in `Page.contents` did not match an API object @NiklasRosenstein Fix markdown: the Markdown header level for methods is now correctly read from the \"Method\" key in `MarkdownRenderer.header_level_by_type` 121 @NiklasRosenstein Improvement cli: remove `--bootstrap-mkdocs` in favor of `--bootstrap` option which now accepts an argument @NiklasRosenstein Improvement cli: the `--bootstrap` option now requires an argument, which must be either \"base\", \"mkdocs\" or \"hugo\" (new) @NiklasRosenstein Feature mkdocs: The `MkdocsRenderer.clean_render` option is enabled again by default, but instead of removing the whole `content_directory`, it will instead only remove files that it has previously generated (it will place a `.generated-files.txt` file in the `output_directory` for that). @NiklasRosenstein Feature cli: add `MarkdownRenderer.classdef_with_decorators` and `MarkdownRenderer.signature_with_decorators` options @NiklasRosenstein Feature Add new `HugoRenderer` (YAML type name `hugo`). 106 @NiklasRosenstein Feature smart-processor: now looks for a `@doc:fmt: ` string in the docstring, which can be used to override the style that is used in case the automatically detected style is incorrect @NiklasRosenstein Docs The Pydoc-Markdown documentation is now available on Read the Docs (https://pydoc-markdown.readthedocs.io/en/latest/) @NiklasRosenstein Feature api: Add new `Builder` interface that is used with the new `--build` and `--site-dir` options @NiklasRosenstein Feature mkdocs: Implement `Builder` interface for `MkDocsRenderer` @NiklasRosenstein Feature hugo: Implement `Builder` interface for `HugoRenderer` @NiklasRosenstein Feature cli: Add new `--build` and `--site-dir` options as well as `--bootstrap readthedocs` @NiklasRosenstein Fix mkdocs: Fix error in MkDocs navigation generation if a page has no `source` and no `contents` @NiklasRosenstein Improvement mkdocs: generated `mkdocs.yml` now uses forward slashes for filenames on Windows system to increase portability 129 @NiklasRosenstein Feature add new `$.hooks.pre-render` and `$.hooks.post-render` options 112 @NiklasRosenstein","title":"3.2.0 (2020-07-13)"},{"location":"changelog/#311-2020-06-26","text":"Type Description PR Issues Author Improvement dependencies: bump dependency on `nr.databind.core` to `~0.0.18` to avoid picking up the bad `0.0.17` version 126 @NiklasRosenstein","title":"3.1.1 (2020-06-26)"},{"location":"changelog/#310-2020-06-04","text":"Type Description PR Issues Author Improvement cli: rename `--watch-and-serve` option to `--server` @NiklasRosenstein Improvement cli: watch and serve mainloop now reloads the config file and does not open the browser another time if it was already opened once. @NiklasRosenstein Fix cli: fix `pydoc-markdown.yml` generated with `--bootstrap` 118 @NiklasRosenstein Improvement markdown: * change default for `header_level_by_type` (`2` to `1` for modules, `3` to `2` for classes). * change default for `descriptive_class_title` (`false` to `true`) @NiklasRosenstein Feature markdown: added `content_directory` option (replaces hardcoded default `docs` value, defaults to `content` now) @NiklasRosenstein Improvement markdown: renamed `clean_docs_directory_on_render` to `clean_render` and change the default from `true` to `false`. @NiklasRosenstein Improvement mkdocs: `mkdocs_config` option can now be set to `null` (the renderer will the refrain from writing a `mkdocs.yml` file into the output directory). @NiklasRosenstein Fix python: fix assignments with annotations being ignored by the parser 115 @NiklasRosenstein","title":"3.1.0 (2020-06-04)"},{"location":"changelog/#302-2020-05-16","text":"Type Description PR Issues Author Fix mkdocs: fix `NameError` in `MkdocsRenderer` @NiklasRosenstein","title":"3.0.2 (2020-05-16)"},{"location":"changelog/#301-2020-05-16","text":"Type Description PR Issues Author Feature cli: added `--version` option @NiklasRosenstein Feature cli: added `-p,--package` option (which overrides `PythonLoader.packages`) @NiklasRosenstein Feature utils: added `pydoc_markdown.utils.page` module @NiklasRosenstein Feature cli: added `RenderSession` class to `pydoc_markdown.main` module which makes the cli logic easier to maintain and re-use. @NiklasRosenstein Feature markdown: added hidden `MarkdownRenderer.fp` option @NiklasRosenstein Feature python: added `PythonLoader.packages` option @NiklasRosenstein Improvement python: changed behavior of `PythonLoader.modules` option (it will not only load the module that was explicitly specified and exclude any sub-modules, if applicable). @NiklasRosenstein Improvement cli: dynamically lookup `MarkdownRenderer` configuration from the renderer to support renderers other than `MarkdownRenderer` and `MkdocsRenderer` that supply a `markdown` field that is an instance of `MarkdownRenderer` (so they can be used with `--render-toc` as well). @NiklasRosenstein","title":"3.0.1 (2020-05-16)"},{"location":"changelog/#300-2020-05-12","text":"Type Description PR Issues Author Feature Initial release of Pydoc-Markdown v3. @NiklasRosenstein","title":"3.0.0 (2020-05-12)"},{"location":"contributing/","text":"Contributing to Pydoc-Markdown Contributions to Pydoc-Markdown are very welcome! If you want to talk about a potential contribution before investing any time, please do create a new topic on GitHub Discussions . Pull request requirements Please look to adhere to the existing code style (2-space indendation, 120 character line length limit) Pull requests should contain at least one new changelog entry unless the change is trivial (see below for details) Changelog entries Pydoc-Markdown uses Slam to manage changelogs. You should use the Slam CLI to add a new changelog entry, otherwise you need to manually generate a UUID-4. $ slap changelog add -t <type> -d <changelog message> [--issue <issue_url>] After you create the pull request, GitHub Actions will take care of injecting the PR URL into the changelog entry.","title":"Contributing"},{"location":"contributing/#contributing-to-pydoc-markdown","text":"Contributions to Pydoc-Markdown are very welcome! If you want to talk about a potential contribution before investing any time, please do create a new topic on GitHub Discussions .","title":"Contributing to Pydoc-Markdown"},{"location":"contributing/#pull-request-requirements","text":"Please look to adhere to the existing code style (2-space indendation, 120 character line length limit) Pull requests should contain at least one new changelog entry unless the change is trivial (see below for details)","title":"Pull request requirements"},{"location":"contributing/#changelog-entries","text":"Pydoc-Markdown uses Slam to manage changelogs. You should use the Slam CLI to add a new changelog entry, otherwise you need to manually generate a UUID-4. $ slap changelog add -t <type> -d <changelog message> [--issue <issue_url>] After you create the pull request, GitHub Actions will take care of injecting the PR URL into the changelog entry.","title":"Changelog entries"},{"location":"deprecated-configuration/","text":"Deprecated Configuration Attention Using Pydoc-Markdown this way is deprecated since v4.6.0. It is strongly recommended that you use the Novella build backend instead (see Getting started ). This way of using Pydoc-Markdown will likely be removed with the next major version release (5.x). Pydoc-Markdown can be configured with using via a YAML file. By default, the CLI will look for a file called pydoc-markdown.yaml (or .yml ) in the current working directory. (Note that the configuration is not read from file when using the -m,--module , -p,--package and other options that are intended for invoking Pydoc-Markdown without a configuration file). Tip : The --bootstrap and --bootstrap-mkdocs options can be used to write a template configuration file. If you use the YAML configuration, the configuration file is pre-processed with a YTT -like templating language (see YAML Preprocessing ). The configuration contains of four main sections: loaders : A list of plugins that load API objects, for example from Python source files. The default configuration defines just a python loader. processors : A list of plugins that process API objects to modify their docstrings (e.g. to adapt them from a documentation format to Markdown or to remove items that should not be rendered into the documentation). The default configuration defines the filter , smart and crossref processors in that order. renderer : A plugin that produces the output files. The default configuration defines the markdown renderer (which by default will render a single file to stdout). hooks : Configuration for commands that will be executed before and after rendering. YAML Example loaders : - type : python search_path : [ ../src ] renderer : type : mkdocs pages : - title : API Documentation name : index contents : - school.* PyProject Example [[tool.pydoc-markdown.loaders]] type = \"python\" search_path = [ \"../src\" ] [tool.pydoc-markdown.renderer] type = \"mkdocs\" [[tool.pydoc-markdown.renderer.pages]] title = \"API Documentation\" name = \"index\" contents = [ \"school.*\" ] YAML Preprocessing New in Pydoc-Markdown 3.3.0. See also pydoc_markdown.util.ytemplate Pydoc-Markdown performs very basic pre-processing on the YAML configuration before it is deserialized. The format is similar to that of YTT , but supports only a subset of the features and logic is interpreted as actual Python code. Supports preprocessing features: def blocks to define a Python function (requires an end keyword, encapsulating YAML code into the function definition is not supported) Value substitution Check out the Read the Docs/Hugo baseURL documentation for an example. Loaders Loaders are configured in the $.loaders section of the Pydoc-Markdown configuration file. The key must be a list of loader definitions. Currently there is only the Python Loader . Example: loaders: - type: loadertype1 key: value - type: loadertype2 If no loaders are specified, the Python loader is used by default. Processors Similar to the Loaders, the $.processors section expects a list of processor definitions. If no processors are defined, the filter , smart and crossref processors are used (in that order). Many processors do not have any additional options. Example: processors: - type: filter documented_only: false - type: smart - type: crossref Renderer The $.renderer defines the renderer to use when running pydoc-markdown without arguments. Some renderers support the --server option, which allows a live-preview of the documentation. The default renderer is the Markdown renderer which will print the result to the terminal. Other renderers may produce files on disk in a layout that conforms with the static site generator that they aim to support. Example: renderer: type: mkdocs pages: - title: API Documentation name: index contents: - school.* Hooks Example: hooks: pre-render: - generate-changelog >docs/CHANGELOG.md Allows you to specify shell commands that will be execute before or after the render step. Available keys $.hooks.pre-render $.hooks.post-render Testing your Configuration You can test the configuration of your loaders using the pydoc-markdown --dump option. Combine this with docpspec -m --dump-tree to get a full formatted list tree of all API objects that Pydoc-Markdown has discovered, after applying all processors. You can disable processors by adding the --without-processors function. $ pydoc-markdown --dump | docspec -m --dump-tree module school._class | class Class | | data topic | | data teacher module school._person | class Person | | data name | | data age module school._pupil | class Pupil [ ... ] Hugo baseURL When using Hugo, usually you want to set the baseURL configuration so that it can generated permalinks properly. If you are building on Read the Docs, chances are that you will have multiple versions of the documentation, which all require a different baseURL . Pydoc-Markdown configuration files are pre-processed with a YTT -like templating language. #@ def base_url(): #@ if env.READTHEDOCS: #@ return \"https://pydoc-markdown.readthedocs.io/en/\" + env.READTHEDOCS_VERSION + \"/\" #@ else: #@ return None #@ end renderer: type: hugo config: baseURL: #@ base_url()","title":"Deprecated configuration"},{"location":"deprecated-configuration/#deprecated-configuration","text":"Attention Using Pydoc-Markdown this way is deprecated since v4.6.0. It is strongly recommended that you use the Novella build backend instead (see Getting started ). This way of using Pydoc-Markdown will likely be removed with the next major version release (5.x). Pydoc-Markdown can be configured with using via a YAML file. By default, the CLI will look for a file called pydoc-markdown.yaml (or .yml ) in the current working directory. (Note that the configuration is not read from file when using the -m,--module , -p,--package and other options that are intended for invoking Pydoc-Markdown without a configuration file). Tip : The --bootstrap and --bootstrap-mkdocs options can be used to write a template configuration file. If you use the YAML configuration, the configuration file is pre-processed with a YTT -like templating language (see YAML Preprocessing ). The configuration contains of four main sections: loaders : A list of plugins that load API objects, for example from Python source files. The default configuration defines just a python loader. processors : A list of plugins that process API objects to modify their docstrings (e.g. to adapt them from a documentation format to Markdown or to remove items that should not be rendered into the documentation). The default configuration defines the filter , smart and crossref processors in that order. renderer : A plugin that produces the output files. The default configuration defines the markdown renderer (which by default will render a single file to stdout). hooks : Configuration for commands that will be executed before and after rendering.","title":"Deprecated Configuration"},{"location":"deprecated-configuration/#yaml-example","text":"loaders : - type : python search_path : [ ../src ] renderer : type : mkdocs pages : - title : API Documentation name : index contents : - school.*","title":"YAML Example"},{"location":"deprecated-configuration/#pyproject-example","text":"[[tool.pydoc-markdown.loaders]] type = \"python\" search_path = [ \"../src\" ] [tool.pydoc-markdown.renderer] type = \"mkdocs\" [[tool.pydoc-markdown.renderer.pages]] title = \"API Documentation\" name = \"index\" contents = [ \"school.*\" ]","title":"PyProject Example"},{"location":"deprecated-configuration/#yaml-preprocessing","text":"New in Pydoc-Markdown 3.3.0. See also pydoc_markdown.util.ytemplate Pydoc-Markdown performs very basic pre-processing on the YAML configuration before it is deserialized. The format is similar to that of YTT , but supports only a subset of the features and logic is interpreted as actual Python code. Supports preprocessing features: def blocks to define a Python function (requires an end keyword, encapsulating YAML code into the function definition is not supported) Value substitution Check out the Read the Docs/Hugo baseURL documentation for an example.","title":"YAML Preprocessing"},{"location":"deprecated-configuration/#loaders","text":"Loaders are configured in the $.loaders section of the Pydoc-Markdown configuration file. The key must be a list of loader definitions. Currently there is only the Python Loader . Example: loaders: - type: loadertype1 key: value - type: loadertype2 If no loaders are specified, the Python loader is used by default.","title":"Loaders"},{"location":"deprecated-configuration/#processors","text":"Similar to the Loaders, the $.processors section expects a list of processor definitions. If no processors are defined, the filter , smart and crossref processors are used (in that order). Many processors do not have any additional options. Example: processors: - type: filter documented_only: false - type: smart - type: crossref","title":"Processors"},{"location":"deprecated-configuration/#renderer","text":"The $.renderer defines the renderer to use when running pydoc-markdown without arguments. Some renderers support the --server option, which allows a live-preview of the documentation. The default renderer is the Markdown renderer which will print the result to the terminal. Other renderers may produce files on disk in a layout that conforms with the static site generator that they aim to support. Example: renderer: type: mkdocs pages: - title: API Documentation name: index contents: - school.*","title":"Renderer"},{"location":"deprecated-configuration/#hooks","text":"Example: hooks: pre-render: - generate-changelog >docs/CHANGELOG.md Allows you to specify shell commands that will be execute before or after the render step. Available keys $.hooks.pre-render $.hooks.post-render","title":"Hooks"},{"location":"deprecated-configuration/#testing-your-configuration","text":"You can test the configuration of your loaders using the pydoc-markdown --dump option. Combine this with docpspec -m --dump-tree to get a full formatted list tree of all API objects that Pydoc-Markdown has discovered, after applying all processors. You can disable processors by adding the --without-processors function. $ pydoc-markdown --dump | docspec -m --dump-tree module school._class | class Class | | data topic | | data teacher module school._person | class Person | | data name | | data age module school._pupil | class Pupil [ ... ]","title":"Testing your Configuration"},{"location":"deprecated-configuration/#hugo-baseurl","text":"When using Hugo, usually you want to set the baseURL configuration so that it can generated permalinks properly. If you are building on Read the Docs, chances are that you will have multiple versions of the documentation, which all require a different baseURL . Pydoc-Markdown configuration files are pre-processed with a YTT -like templating language. #@ def base_url(): #@ if env.READTHEDOCS: #@ return \"https://pydoc-markdown.readthedocs.io/en/\" + env.READTHEDOCS_VERSION + \"/\" #@ else: #@ return None #@ end renderer: type: hugo config: baseURL: #@ base_url()","title":"Hugo baseURL"},{"location":"getting-started/","text":"Getting started Starting with Pydoc-Markdown v4.6.0, you should configure your build using Novella . Note however, that Novella is not installed directly with Pydoc-Markdown because it requires Python 3.8+ and for backwards compatibility with the old build style prior to v4.6.0, Pydoc-Markdown remains 3.7 compatible. You need to install Novella separately or use the Pydoc-Markdown extra. $ pip install pydoc-markdown[novella] Configuration A Novella build is configured using a build.novella script. In most cases you want to rely on a template provided by Novella, such as the MkDocs template. Check out the Novella documentation to find what types of templates are available here . docs/build.novella template \"mkdocs\" { content_directory = \"content\" } action \"preprocess-markdown\" { use \"pydoc\" } What is happening here? The mkdocs pipeline template is applied. The content_directory is the directory that contains your MkDocs source files. It will be copied to the temporary build location alongside the mkdocs.yml file. Note that your build.novella script should sit next two these files. The preprocess-markdown action that is one of the actions created by the template is retrieved and configured further. We instruct it to make use of the \"pydoc\" plugin, which is implemented by Pydoc-Markdown and provides the @pydoc and {@link pydoc:} tags. Note The content/ directory is the default so it does not need to be set explicitly and it is sufficient to write template \"mkdocs\" (without an empty configuration block). The mkdocs template will apply a default configuration delivered with Novella to your MkDocs configuration. If you don't want this, you can configure the \"mkdocs-update-config\" action to disable this. Note that you can also have no MkDocs configuration file and the template will create a default file for you. The pydoc tag is implemented in {@link pydoc:pydoc_markdown.novella.preprocessor.PydocTagPreprocessor}. Look it up to understand how it can be configured further. The pydoc tag processor applies a heuristic to populate the default search path for your Python source code. If the directory in which the build is executed is called docs or documentation , it will default to [ \"../src\", \"..\" ] , otherwise it will default to [ \"src\", \".\" ] . Write some documentation Before Pydoc-Markdown 4.6.0, a YAML configuration was used to describe the files to generate and their content. Now with Novella as the preprocessor, you create those files leave special instructions to inject generated content. For example, the @cat tag is useful to inject the content of another file. docs/content/index.md # Welcome to my Project documentation! @cat ../../ readme . md : with slice_lines = \"2:\" The @pydoc tag is the piece provided by Pydoc-Markdown itself. It uses the Class MarkdownRenderer to generate Markdown formatted API documentation of the API object you specify. docs/content/api.md # API Documentation @pydoc my_module . SomeClass Build the documentation Change into the docs/ directory where your build.novella script resides and invoke the Novella CLI. The MkDocs template exposes some command-line arguments that you can pass through the CLI, one of which is the --serve option that runs MkDocs in the server mode instead of building the documentation and writing it to disk. $ novella --help usage: novella [--version] [-h] [-i TEMPLATE] [-c PATH] [-d DIRECTORY] [-b PATH] [-r] [--dot] [--intercept ACTION] [--serve] [--site-dir PATH] [--base-url URL] options: --version show program's version number and exit -h, --help Show this help output. -i TEMPLATE, --init TEMPLATE Create a `build.novella` file initialized from a template. Available templates are: \"mkdocs\", \"hugo\" -c PATH, --config-file PATH The configuration file to load. Can be a pyproject.toml in which case the code is looked up under the tool.novella.script key. (default: None) -d DIRECTORY, --directory DIRECTORY Switch to the specified directory before executing the configuration file. -b PATH, --build-directory PATH The build directory. If not specified, a temporary directory will be created. -r, --use-reloader Enable reloading, which will re-execute the pipeline if a watched file changes. --dot Produce a DotViz representation of the build graph. --intercept ACTION The name of an action to intercept and pause the execution, waiting for user input to continue. Useful for debugging intermediate steps of the build process. Currently, the action name must be matched exactly and actions can only be intercepted before they are run. If this option is provided, all possible intercept points are logged to the console. template (mkdocs): --serve Use mkdocs serve --site-dir PATH Build directory for MkDocs (defaults to \"_site\") --base-url URL The base URL to prefix to autogenerated link inside the documentation. Static vs. generated Markdown files The old-style YAML configuration allowed you to define in one file all pages and the Python API objects they should contain. However, when you use Novella, each page will need to exist as a Markdown file. This has a few advantages: Easier to understand ; The YAML pages configuration could be hard to reason about, while having an actual file for each page is much more human friendly and actually resembles the project structure for the static site generator in use. 1-to-1 mapping ; Each page in the final documentation is represented by a file in the source project, allowing things like the \"Edit URL\" generated by MkDocs to point to the actual page source rather than a 404 page. Mixing static and generated content ; Placing generated API documentation where the @pydoc tag is used in the Markdown page allows you to put static documentation content around it. Now, if you still want to generate Markdown files at build time, Pydoc-Markdown does not currently provide any functionality to do that; although some discussion around the topic is happening in #245 . However, the Novella build script is just code, so if you really need it, you can generate the files there: docs/build.novella template \"mkdocs\" def api_pages = { \"SomeClass\" : \"my_module.SomeClass\" , # ... } action \"mkdocs-update-config\" { site_name = \"My module\" profile = \"readthedocs\" update_with config -> { def items = [] for title , package in api_pages . items (): items . append ({ title : 'api/ {} .md' . format ( package ) }) config [ 'nav' ] . append ({ 'API Documentation' : items }) } } action \"preprocess-markdown\" { use \"pydoc\" } do name : \"generate-api-pages\" closure : { # Make sure that this action runs before the Markdown preprocessors. precedes \"preprocess-markdown\" } action : { for title , package in api_pages . items (): def path = directory / 'content' / 'api' / ( package + '.md' ) path . parent . mkdir ( parents = True , exist_ok = True ) path . write_text ( '--- \\n title: {} \\n --- \\n @pydoc {} \\n ' . format ( title , package )) }","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Starting with Pydoc-Markdown v4.6.0, you should configure your build using Novella . Note however, that Novella is not installed directly with Pydoc-Markdown because it requires Python 3.8+ and for backwards compatibility with the old build style prior to v4.6.0, Pydoc-Markdown remains 3.7 compatible. You need to install Novella separately or use the Pydoc-Markdown extra. $ pip install pydoc-markdown[novella]","title":"Getting started"},{"location":"getting-started/#configuration","text":"A Novella build is configured using a build.novella script. In most cases you want to rely on a template provided by Novella, such as the MkDocs template. Check out the Novella documentation to find what types of templates are available here . docs/build.novella template \"mkdocs\" { content_directory = \"content\" } action \"preprocess-markdown\" { use \"pydoc\" } What is happening here? The mkdocs pipeline template is applied. The content_directory is the directory that contains your MkDocs source files. It will be copied to the temporary build location alongside the mkdocs.yml file. Note that your build.novella script should sit next two these files. The preprocess-markdown action that is one of the actions created by the template is retrieved and configured further. We instruct it to make use of the \"pydoc\" plugin, which is implemented by Pydoc-Markdown and provides the @pydoc and {@link pydoc:} tags. Note The content/ directory is the default so it does not need to be set explicitly and it is sufficient to write template \"mkdocs\" (without an empty configuration block). The mkdocs template will apply a default configuration delivered with Novella to your MkDocs configuration. If you don't want this, you can configure the \"mkdocs-update-config\" action to disable this. Note that you can also have no MkDocs configuration file and the template will create a default file for you. The pydoc tag is implemented in {@link pydoc:pydoc_markdown.novella.preprocessor.PydocTagPreprocessor}. Look it up to understand how it can be configured further. The pydoc tag processor applies a heuristic to populate the default search path for your Python source code. If the directory in which the build is executed is called docs or documentation , it will default to [ \"../src\", \"..\" ] , otherwise it will default to [ \"src\", \".\" ] .","title":"Configuration"},{"location":"getting-started/#write-some-documentation","text":"Before Pydoc-Markdown 4.6.0, a YAML configuration was used to describe the files to generate and their content. Now with Novella as the preprocessor, you create those files leave special instructions to inject generated content. For example, the @cat tag is useful to inject the content of another file. docs/content/index.md # Welcome to my Project documentation! @cat ../../ readme . md : with slice_lines = \"2:\" The @pydoc tag is the piece provided by Pydoc-Markdown itself. It uses the Class MarkdownRenderer to generate Markdown formatted API documentation of the API object you specify. docs/content/api.md # API Documentation @pydoc my_module . SomeClass","title":"Write some documentation"},{"location":"getting-started/#build-the-documentation","text":"Change into the docs/ directory where your build.novella script resides and invoke the Novella CLI. The MkDocs template exposes some command-line arguments that you can pass through the CLI, one of which is the --serve option that runs MkDocs in the server mode instead of building the documentation and writing it to disk. $ novella --help usage: novella [--version] [-h] [-i TEMPLATE] [-c PATH] [-d DIRECTORY] [-b PATH] [-r] [--dot] [--intercept ACTION] [--serve] [--site-dir PATH] [--base-url URL] options: --version show program's version number and exit -h, --help Show this help output. -i TEMPLATE, --init TEMPLATE Create a `build.novella` file initialized from a template. Available templates are: \"mkdocs\", \"hugo\" -c PATH, --config-file PATH The configuration file to load. Can be a pyproject.toml in which case the code is looked up under the tool.novella.script key. (default: None) -d DIRECTORY, --directory DIRECTORY Switch to the specified directory before executing the configuration file. -b PATH, --build-directory PATH The build directory. If not specified, a temporary directory will be created. -r, --use-reloader Enable reloading, which will re-execute the pipeline if a watched file changes. --dot Produce a DotViz representation of the build graph. --intercept ACTION The name of an action to intercept and pause the execution, waiting for user input to continue. Useful for debugging intermediate steps of the build process. Currently, the action name must be matched exactly and actions can only be intercepted before they are run. If this option is provided, all possible intercept points are logged to the console. template (mkdocs): --serve Use mkdocs serve --site-dir PATH Build directory for MkDocs (defaults to \"_site\") --base-url URL The base URL to prefix to autogenerated link inside the documentation.","title":"Build the documentation"},{"location":"getting-started/#static-vs-generated-markdown-files","text":"The old-style YAML configuration allowed you to define in one file all pages and the Python API objects they should contain. However, when you use Novella, each page will need to exist as a Markdown file. This has a few advantages: Easier to understand ; The YAML pages configuration could be hard to reason about, while having an actual file for each page is much more human friendly and actually resembles the project structure for the static site generator in use. 1-to-1 mapping ; Each page in the final documentation is represented by a file in the source project, allowing things like the \"Edit URL\" generated by MkDocs to point to the actual page source rather than a 404 page. Mixing static and generated content ; Placing generated API documentation where the @pydoc tag is used in the Markdown page allows you to put static documentation content around it. Now, if you still want to generate Markdown files at build time, Pydoc-Markdown does not currently provide any functionality to do that; although some discussion around the topic is happening in #245 . However, the Novella build script is just code, so if you really need it, you can generate the files there: docs/build.novella template \"mkdocs\" def api_pages = { \"SomeClass\" : \"my_module.SomeClass\" , # ... } action \"mkdocs-update-config\" { site_name = \"My module\" profile = \"readthedocs\" update_with config -> { def items = [] for title , package in api_pages . items (): items . append ({ title : 'api/ {} .md' . format ( package ) }) config [ 'nav' ] . append ({ 'API Documentation' : items }) } } action \"preprocess-markdown\" { use \"pydoc\" } do name : \"generate-api-pages\" closure : { # Make sure that this action runs before the Markdown preprocessors. precedes \"preprocess-markdown\" } action : { for title , package in api_pages . items (): def path = directory / 'content' / 'api' / ( package + '.md' ) path . parent . mkdir ( parents = True , exist_ok = True ) path . write_text ( '--- \\n title: {} \\n --- \\n @pydoc {} \\n ' . format ( title , package )) }","title":"Static vs. generated Markdown files"},{"location":"just-generate-me-some-markdown/","text":"Just generate me some Markdown! If you only want to use Pydoc-Markdown to generate Markdown from Python code, but not use it for anything else (such as interfacing with a static site generator), you can of course do that. You can make use of the Class PythonLoader and Class MarkdownRenderer , or more conveniently the Class PydocMarkdown APIs, or use the CLI. CLI Example The Pydoc-Markdown CLI accepts some options that can modify the default configuration (i.e. the Python loader and Markdown renderer) and write the generated Markdown to stdout. pydoc-markdown -I src -m package_name.module_name --render-toc > module_name.md You can also supply a YAML configuration as a positional argument that will be treated the same way as if it was loaded from a pydoc-markdown.yml file. pydoc-markdown -m my_module '{ renderer: { type: markdown, descriptive_class_title: false, render_toc: true } }' > my_module.md API Example Example 1 Example 2 from pydoc_markdown.interfaces import Context from pydoc_markdown.contrib.loaders.python import PythonLoader from pydoc_markdown.contrib.renderers.markdown import MarkdownRenderer context = Context ( directory = '.' ) loader = PythonLoader ( search_path = [ 'src' ]) renderer = MarkdownRenderer ( render_module_header = False ) loader . init ( context ) renderer . init ( context ) modules = loader . load () print ( renderer . render_to_string ( modules )) Note This does not include any filtering logic and will just render every member in your Python code. from pydoc_markdown import PydocMarkdown from pydoc_markdown.contrib.loaders.python import PythonLoader from pydoc_markdown.contrib.renderers.markdown import MarkdownRenderer session = PydocMarkdown () # Preconfigured with a PythonLoader, FilterProcessor, CrossRefProcess, SmartProcessor and MarkdownRenderer assert isinstance ( session . loaders [ 0 ], PythonLoader ) session . loaders [ 0 ] . search_path = [ \"src\" ] assert isinstance ( session . renderer , MarkdownRenderer ) session . renderer . render_to_string ( session . process ( session . load_modules ()))","title":"Just generate me some Markdown!"},{"location":"just-generate-me-some-markdown/#just-generate-me-some-markdown","text":"If you only want to use Pydoc-Markdown to generate Markdown from Python code, but not use it for anything else (such as interfacing with a static site generator), you can of course do that. You can make use of the Class PythonLoader and Class MarkdownRenderer , or more conveniently the Class PydocMarkdown APIs, or use the CLI.","title":"Just generate me some Markdown!"},{"location":"just-generate-me-some-markdown/#cli-example","text":"The Pydoc-Markdown CLI accepts some options that can modify the default configuration (i.e. the Python loader and Markdown renderer) and write the generated Markdown to stdout. pydoc-markdown -I src -m package_name.module_name --render-toc > module_name.md You can also supply a YAML configuration as a positional argument that will be treated the same way as if it was loaded from a pydoc-markdown.yml file. pydoc-markdown -m my_module '{ renderer: { type: markdown, descriptive_class_title: false, render_toc: true } }' > my_module.md","title":"CLI Example"},{"location":"just-generate-me-some-markdown/#api-example","text":"Example 1 Example 2 from pydoc_markdown.interfaces import Context from pydoc_markdown.contrib.loaders.python import PythonLoader from pydoc_markdown.contrib.renderers.markdown import MarkdownRenderer context = Context ( directory = '.' ) loader = PythonLoader ( search_path = [ 'src' ]) renderer = MarkdownRenderer ( render_module_header = False ) loader . init ( context ) renderer . init ( context ) modules = loader . load () print ( renderer . render_to_string ( modules )) Note This does not include any filtering logic and will just render every member in your Python code. from pydoc_markdown import PydocMarkdown from pydoc_markdown.contrib.loaders.python import PythonLoader from pydoc_markdown.contrib.renderers.markdown import MarkdownRenderer session = PydocMarkdown () # Preconfigured with a PythonLoader, FilterProcessor, CrossRefProcess, SmartProcessor and MarkdownRenderer assert isinstance ( session . loaders [ 0 ], PythonLoader ) session . loaders [ 0 ] . search_path = [ \"src\" ] assert isinstance ( session . renderer , MarkdownRenderer ) session . renderer . render_to_string ( session . process ( session . load_modules ()))","title":"API Example"},{"location":"readthedocs/","text":"Read the Docs Using Pydoc-Markdown on readthedocs.org requires some \"hacking\" because natively it does not allow you to run any custom commands. Using readthedocs-custom-steps , you can hook into the call that RTD expects to generate the documentation using Sphinx/MkDocs and run your own commands instead. Example .readthedocs.yml setup.cfg pyproject.toml version : 2 mkdocs : {} # tell readthedocs to use mkdocs python : version : 3.7 install : - method : pip extra_requirements : - rtd [options.extras_require] rtd = readthedocs-custom-steps==0.6.2 # ... [tool.readthedocs-custom-steps] script = \"\"\" novella --site-dir _site/html \"\"\"","title":"Read the Docs"},{"location":"readthedocs/#read-the-docs","text":"Using Pydoc-Markdown on readthedocs.org requires some \"hacking\" because natively it does not allow you to run any custom commands. Using readthedocs-custom-steps , you can hook into the call that RTD expects to generate the documentation using Sphinx/MkDocs and run your own commands instead. Example .readthedocs.yml setup.cfg pyproject.toml version : 2 mkdocs : {} # tell readthedocs to use mkdocs python : version : 3.7 install : - method : pip extra_requirements : - rtd [options.extras_require] rtd = readthedocs-custom-steps==0.6.2 # ... [tool.readthedocs-custom-steps] script = \"\"\" novella --site-dir _site/html \"\"\"","title":"Read the Docs"},{"location":"api/cli/","text":"Command-line interface Usage: pydoc-markdown [OPTIONS] [CONFIG] Pydoc-Markdown is a renderer for Python API documentation in Markdown format. With no arguments it will load the default configuration file. If the *config* argument is specified, it must be the name of a configuration file or a YAML formatted object for the configuration. Options: --version Show the version and exit. --bootstrap [base|mkdocs|hugo|readthedocs|docusaurus] Create a Pydoc-Markdown configuration file in the current working directory. -v, --verbose Increase log verbosity. -q, --quiet Decrease the log verbosity. -m, --module MODULE The module to parse and generated API documentation for. Can be specified multiple times. Using this option will disable loading the default configuration file. -p, --package PACKAGE The package to parse and generated API documentation for including all sub-packages and -modules. Can be specified multiple times. Using this option will disable loading the default configuration file. -I, --search-path PATH A directory to use in the search for Python modules. Can be specified multiple times. Using this option will disable loading the default configuration file. --py2 / --py3 Switch between parsing Python 2 and Python 3 code. The default is Python 3. Using --py2 will enable parsing code that uses the \"print\" statement. This is equivalent of setting the print_function option of the \"python\" loader to False. Using this option will disable loading the default configuration file. --render-toc / --no-render-toc Enable/disable the rendering of the TOC in the \"markdown\" renderer. -s, --server Watch for file changes and re-render if needed and start the server for the configured renderer. This doesn't work for all renderers. -o, --open Open the browser after starting the server with -s,--server. --dump Dump the loaded modules in Docspec JSON format to stdout, after the processors. --with-processors / --without-processors Enable/disable processors. Only with --dump. --build Invoke a build after the Markdown files are produced. Note that some renderers may not support this option (e.g. the \"markdown\" renderer). --site-dir TEXT Set the output directory when using --build. --help Show this message and exit. Version: pydoc-markdown, version 4.6.3","title":"Command-line interface"},{"location":"api/cli/#command-line-interface","text":"Usage: pydoc-markdown [OPTIONS] [CONFIG] Pydoc-Markdown is a renderer for Python API documentation in Markdown format. With no arguments it will load the default configuration file. If the *config* argument is specified, it must be the name of a configuration file or a YAML formatted object for the configuration. Options: --version Show the version and exit. --bootstrap [base|mkdocs|hugo|readthedocs|docusaurus] Create a Pydoc-Markdown configuration file in the current working directory. -v, --verbose Increase log verbosity. -q, --quiet Decrease the log verbosity. -m, --module MODULE The module to parse and generated API documentation for. Can be specified multiple times. Using this option will disable loading the default configuration file. -p, --package PACKAGE The package to parse and generated API documentation for including all sub-packages and -modules. Can be specified multiple times. Using this option will disable loading the default configuration file. -I, --search-path PATH A directory to use in the search for Python modules. Can be specified multiple times. Using this option will disable loading the default configuration file. --py2 / --py3 Switch between parsing Python 2 and Python 3 code. The default is Python 3. Using --py2 will enable parsing code that uses the \"print\" statement. This is equivalent of setting the print_function option of the \"python\" loader to False. Using this option will disable loading the default configuration file. --render-toc / --no-render-toc Enable/disable the rendering of the TOC in the \"markdown\" renderer. -s, --server Watch for file changes and re-render if needed and start the server for the configured renderer. This doesn't work for all renderers. -o, --open Open the browser after starting the server with -s,--server. --dump Dump the loaded modules in Docspec JSON format to stdout, after the processors. --with-processors / --without-processors Enable/disable processors. Only with --dump. --build Invoke a build after the Markdown files are produced. Note that some renderers may not support this option (e.g. the \"markdown\" renderer). --site-dir TEXT Set the output directory when using --build. --help Show this message and exit. Version: pydoc-markdown, version 4.6.3","title":"Command-line interface"},{"location":"api/pydoc_markdown/","text":"Class PydocMarkdown @dataclasses . dataclass class PydocMarkdown () [view_source] This object represents the main configuration for Pydoc-Markdown. loaders A list of loader implementations that load docspec.Modules . Defaults to PythonLoader . processors A list of processor implementations that modify docspec.Modules . Defaults to FilterProcessor , SmartProcessor and CrossrefProcessor . renderer A renderer for docspec.Modules . Defaults to MarkdownRenderer . hooks Hooks that can be executed at certain points in the pipeline. The commands are executed with the current SHELL . load_config def load_config ( arg : t . Union [ str , dict ]) -> None [view_source] Loads the configuration from a nested data structure or filename as specified per the data argument. If a filename is specified, it may be a JSON, YAML or TOML file. If the name of the TOML file is pyproject.yoml , the configuration will be read from the [tool.pydoc-markdown] section. Arguments : data : A nested structure or the path to a configuration file. init def init ( context : Context ) -> None [view_source] Initialize all plugins with the specified context . Cannot be called multiple times. If omitted, the plugins will be initialized with a default context before the load, process or render phase. load_modules def load_modules () -> t . List [ docspec . Module ] [view_source] Loads modules via the loaders . process def process ( modules : t . List [ docspec . Module ]) -> None [view_source] Process modules via the processors . render def render ( modules : t . List [ docspec . Module ], run_hooks : bool = True ) -> None [view_source] Render modules via the renderer .","title":"Index"},{"location":"api/pydoc_markdown/#class-pydocmarkdown","text":"@dataclasses . dataclass class PydocMarkdown () [view_source] This object represents the main configuration for Pydoc-Markdown.","title":"Class PydocMarkdown"},{"location":"api/pydoc_markdown/#loaders","text":"A list of loader implementations that load docspec.Modules . Defaults to PythonLoader .","title":"loaders"},{"location":"api/pydoc_markdown/#processors","text":"A list of processor implementations that modify docspec.Modules . Defaults to FilterProcessor , SmartProcessor and CrossrefProcessor .","title":"processors"},{"location":"api/pydoc_markdown/#renderer","text":"A renderer for docspec.Modules . Defaults to MarkdownRenderer .","title":"renderer"},{"location":"api/pydoc_markdown/#hooks","text":"Hooks that can be executed at certain points in the pipeline. The commands are executed with the current SHELL .","title":"hooks"},{"location":"api/pydoc_markdown/#load_config","text":"def load_config ( arg : t . Union [ str , dict ]) -> None [view_source] Loads the configuration from a nested data structure or filename as specified per the data argument. If a filename is specified, it may be a JSON, YAML or TOML file. If the name of the TOML file is pyproject.yoml , the configuration will be read from the [tool.pydoc-markdown] section. Arguments : data : A nested structure or the path to a configuration file.","title":"load_config"},{"location":"api/pydoc_markdown/#init","text":"def init ( context : Context ) -> None [view_source] Initialize all plugins with the specified context . Cannot be called multiple times. If omitted, the plugins will be initialized with a default context before the load, process or render phase.","title":"init"},{"location":"api/pydoc_markdown/#load_modules","text":"def load_modules () -> t . List [ docspec . Module ] [view_source] Loads modules via the loaders .","title":"load_modules"},{"location":"api/pydoc_markdown/#process","text":"def process ( modules : t . List [ docspec . Module ]) -> None [view_source] Process modules via the processors .","title":"process"},{"location":"api/pydoc_markdown/#render","text":"def render ( modules : t . List [ docspec . Module ], run_hooks : bool = True ) -> None [view_source] Render modules via the renderer .","title":"render"},{"location":"api/pydoc_markdown/interfaces/","text":"This module defines the interfaces that can to be implemented for Pydoc-Markdown to implement custom loaders for documentation data, processors or renderers. Class Context class Context () [view_source] Context data that is passed to plugins when they are loaded. Class Loader @A . unionclass ( A . unionclass . Subtypes . chain ( A . unionclass . Subtypes . entrypoint ( \"pydoc_markdown.interfaces.Loader\" ), A . unionclass . Subtypes . import_ () ), style = A . unionclass . Style . flat , ) class Loader ( PluginBase ) [view_source] This interface describes an object that is capable of loading documentation data. The location from which the documentation is loaded must be defined with the configuration class. Class Resolver class Resolver ( abc . ABC ) [view_source] A resolver can be used by a Processor to replace cross references with a hyperlink. Class ResolverV2 class ResolverV2 ( abc . ABC ) [view_source] New style interface for resolving based on a text ref from in the context of a docspec.ApiObject to find another. This is different from Resolver because it returns the resolved object directly, instead of some string representation of it. Class Processor @A . unionclass ( A . unionclass . Subtypes . chain ( A . unionclass . Subtypes . entrypoint ( \"pydoc_markdown.interfaces.Processor\" ), A . unionclass . Subtypes . import_ () ), style = A . unionclass . Style . flat , ) class Processor ( PluginBase ) [view_source] A processor is an object that takes a list of docspec.Modules as an input and transforms it in an arbitrary way. This usually processes docstrings to convert from various documentation syntaxes to plain Markdown. Class Renderer @A . unionclass ( A . unionclass . Subtypes . chain ( A . unionclass . Subtypes . entrypoint ( \"pydoc_markdown.interfaces.Renderer\" ), A . unionclass . Subtypes . import_ () ), style = A . unionclass . Style . flat , ) class Renderer ( PluginBase ) [view_source] A renderer is an object that takes a list of docspec.Modules as an input and produces output files or writes to stdout. It may also expose additional command-line arguments. There can only be one renderer at the end of the processor chain. Note that sometimes a renderer may need to perform some processing before the render step. To keep the possibility open that a renderer may implement generic processing that could used without the actual rendering functionality, Renderer is a subclass of Processor . Class SinglePageRenderer class SinglePageRenderer ( PluginBase ) [view_source] Interface for rendering a single page. Class SingleObjectRenderer class SingleObjectRenderer ( PluginBase ) [view_source] Interface for rendering a single docspec.ApiObject . Class Server class Server ( abc . ABC ) [view_source] This interface describes an object that can start a server process for live-viewing generated documentation in the browser. Renderer implementations may additionally implement this interface to advocate their compatibility with the --server and --open options of the pydoc-markdown CLI. reload_server def reload_server ( process : subprocess . Popen ) -> subprocess . Popen [view_source] Called when the files generated by pydoc-markdown have been updated. This gives the implementation a chance to reload the server process. The default implementation returns the process unchanged. Returning None will automatically call start_server() afterwards. Class Builder class Builder ( abc . ABC ) [view_source] This interface can be implemented additionally to the Renderer interface to indicate that the renderer supports building another produce after the markdown files have been rendered. build @abc . abstractmethod def build ( site_dir : str ) -> None [view_source] Invoke the build. The site_dir is the directory in which the output files should be placed. Otherwise, the directory may be determined by the builder. Class SourceLinker @A . unionclass ( A . unionclass . Subtypes . chain ( A . unionclass . Subtypes . entrypoint ( \"pydoc_markdown.interfaces.SourceLinker\" ), A . unionclass . Subtypes . import_ () ), style = A . unionclass . Style . flat , ) class SourceLinker ( PluginBase ) [view_source] This interface is used to determine the URL to the source of an API object. Renderers can use it to place a link to the source in the generated documentation.","title":"interfaces"},{"location":"api/pydoc_markdown/interfaces/#class-context","text":"class Context () [view_source] Context data that is passed to plugins when they are loaded.","title":"Class Context"},{"location":"api/pydoc_markdown/interfaces/#class-loader","text":"@A . unionclass ( A . unionclass . Subtypes . chain ( A . unionclass . Subtypes . entrypoint ( \"pydoc_markdown.interfaces.Loader\" ), A . unionclass . Subtypes . import_ () ), style = A . unionclass . Style . flat , ) class Loader ( PluginBase ) [view_source] This interface describes an object that is capable of loading documentation data. The location from which the documentation is loaded must be defined with the configuration class.","title":"Class Loader"},{"location":"api/pydoc_markdown/interfaces/#class-resolver","text":"class Resolver ( abc . ABC ) [view_source] A resolver can be used by a Processor to replace cross references with a hyperlink.","title":"Class Resolver"},{"location":"api/pydoc_markdown/interfaces/#class-resolverv2","text":"class ResolverV2 ( abc . ABC ) [view_source] New style interface for resolving based on a text ref from in the context of a docspec.ApiObject to find another. This is different from Resolver because it returns the resolved object directly, instead of some string representation of it.","title":"Class ResolverV2"},{"location":"api/pydoc_markdown/interfaces/#class-processor","text":"@A . unionclass ( A . unionclass . Subtypes . chain ( A . unionclass . Subtypes . entrypoint ( \"pydoc_markdown.interfaces.Processor\" ), A . unionclass . Subtypes . import_ () ), style = A . unionclass . Style . flat , ) class Processor ( PluginBase ) [view_source] A processor is an object that takes a list of docspec.Modules as an input and transforms it in an arbitrary way. This usually processes docstrings to convert from various documentation syntaxes to plain Markdown.","title":"Class Processor"},{"location":"api/pydoc_markdown/interfaces/#class-renderer","text":"@A . unionclass ( A . unionclass . Subtypes . chain ( A . unionclass . Subtypes . entrypoint ( \"pydoc_markdown.interfaces.Renderer\" ), A . unionclass . Subtypes . import_ () ), style = A . unionclass . Style . flat , ) class Renderer ( PluginBase ) [view_source] A renderer is an object that takes a list of docspec.Modules as an input and produces output files or writes to stdout. It may also expose additional command-line arguments. There can only be one renderer at the end of the processor chain. Note that sometimes a renderer may need to perform some processing before the render step. To keep the possibility open that a renderer may implement generic processing that could used without the actual rendering functionality, Renderer is a subclass of Processor .","title":"Class Renderer"},{"location":"api/pydoc_markdown/interfaces/#class-singlepagerenderer","text":"class SinglePageRenderer ( PluginBase ) [view_source] Interface for rendering a single page.","title":"Class SinglePageRenderer"},{"location":"api/pydoc_markdown/interfaces/#class-singleobjectrenderer","text":"class SingleObjectRenderer ( PluginBase ) [view_source] Interface for rendering a single docspec.ApiObject .","title":"Class SingleObjectRenderer"},{"location":"api/pydoc_markdown/interfaces/#class-server","text":"class Server ( abc . ABC ) [view_source] This interface describes an object that can start a server process for live-viewing generated documentation in the browser. Renderer implementations may additionally implement this interface to advocate their compatibility with the --server and --open options of the pydoc-markdown CLI.","title":"Class Server"},{"location":"api/pydoc_markdown/interfaces/#reload_server","text":"def reload_server ( process : subprocess . Popen ) -> subprocess . Popen [view_source] Called when the files generated by pydoc-markdown have been updated. This gives the implementation a chance to reload the server process. The default implementation returns the process unchanged. Returning None will automatically call start_server() afterwards.","title":"reload_server"},{"location":"api/pydoc_markdown/interfaces/#class-builder","text":"class Builder ( abc . ABC ) [view_source] This interface can be implemented additionally to the Renderer interface to indicate that the renderer supports building another produce after the markdown files have been rendered.","title":"Class Builder"},{"location":"api/pydoc_markdown/interfaces/#build","text":"@abc . abstractmethod def build ( site_dir : str ) -> None [view_source] Invoke the build. The site_dir is the directory in which the output files should be placed. Otherwise, the directory may be determined by the builder.","title":"build"},{"location":"api/pydoc_markdown/interfaces/#class-sourcelinker","text":"@A . unionclass ( A . unionclass . Subtypes . chain ( A . unionclass . Subtypes . entrypoint ( \"pydoc_markdown.interfaces.SourceLinker\" ), A . unionclass . Subtypes . import_ () ), style = A . unionclass . Style . flat , ) class SourceLinker ( PluginBase ) [view_source] This interface is used to determine the URL to the source of an API object. Renderers can use it to place a link to the source in the generated documentation.","title":"Class SourceLinker"},{"location":"api/pydoc_markdown/loaders/","text":"pydoc_markdown.contrib.loaders.python Class PythonLoader @dataclasses . dataclass class PythonLoader ( Loader ) [view_source] This implementation of the Loader interface parses Python modules and packages using docspec_python . See the options below to control which modules and packages are being loaded and how to configure the parser. With no modules or packages set, the PythonLoader will discover available modules in the current and src/ directory. lib2to3 Quirks Pydoc-Markdown doesn't execute your Python code but instead relies on the lib2to3 parser. This means it also inherits any quirks of lib2to3 . List of known quirks A function argument in Python 3 cannot be called print even though it is legal syntax packages A list of package names that this loader will search for and then parse, including all sub-packages and modules. search_path The module search path. If not specified, the current sys.path is used instead. If any of the elements contain a * (star) symbol, it will be expanded with sys.path . ignore_when_discovered List of modules to ignore when using module discovery on the search_path . parser Options for the Python parser. encoding The encoding to use when reading the Python source files.","title":"contrib.loaders"},{"location":"api/pydoc_markdown/loaders/#pydoc_markdowncontribloaderspython","text":"","title":"pydoc_markdown.contrib.loaders.python"},{"location":"api/pydoc_markdown/loaders/#class-pythonloader","text":"@dataclasses . dataclass class PythonLoader ( Loader ) [view_source] This implementation of the Loader interface parses Python modules and packages using docspec_python . See the options below to control which modules and packages are being loaded and how to configure the parser. With no modules or packages set, the PythonLoader will discover available modules in the current and src/ directory. lib2to3 Quirks Pydoc-Markdown doesn't execute your Python code but instead relies on the lib2to3 parser. This means it also inherits any quirks of lib2to3 . List of known quirks A function argument in Python 3 cannot be called print even though it is legal syntax","title":"Class PythonLoader"},{"location":"api/pydoc_markdown/loaders/#packages","text":"A list of package names that this loader will search for and then parse, including all sub-packages and modules.","title":"packages"},{"location":"api/pydoc_markdown/loaders/#search_path","text":"The module search path. If not specified, the current sys.path is used instead. If any of the elements contain a * (star) symbol, it will be expanded with sys.path .","title":"search_path"},{"location":"api/pydoc_markdown/loaders/#ignore_when_discovered","text":"List of modules to ignore when using module discovery on the search_path .","title":"ignore_when_discovered"},{"location":"api/pydoc_markdown/loaders/#parser","text":"Options for the Python parser.","title":"parser"},{"location":"api/pydoc_markdown/loaders/#encoding","text":"The encoding to use when reading the Python source files.","title":"encoding"},{"location":"api/pydoc_markdown/processors/","text":"pydoc_markdown.contrib.processors Module: pydoc_markdown.contrib.processors.crossref Class CrossrefProcessor @dataclasses . dataclass class CrossrefProcessor ( Processor ) [view_source] Finds references to other objects in Markdown docstrings and produces links to other pages. The links are provided by the current Renderer via the Resolver interface. Note : This processor is a work in progress, and most of the time it just converts references into inline-code. The syntax for cross references is as follows: This is a ref to another class: [PydocmdProcessor](#pydoc:pydoc_markdown.contrib.processors.pydocmd.PydocmdProcessor) You can rename a ref like `this`~PydocmdProcessor And you can append to the ref name like this: [PydocmdProcessors](#pydoc:pydoc_markdown.contrib.processors.pydocmd.PydocmdProcessor) Renders as This is a ref to another class: PydocmdProcessor You can rename a ref like this ~PydocmdProcessor And you can append to the ref name like this: PydocmdProcessors Example configuration: processors : - type : crossref resolver_v2 If specified, it will be used instead of the resolver passed to process() and the generated Markdown code for the reference uses Novella {@link } syntax. Module: pydoc_markdown.contrib.processors.filter Class FilterProcessor @dataclasses . dataclass class FilterProcessor ( Processor ) [view_source] The filter processor removes module and class members based on certain criteria. Example configuration: - type : filter expression : not name.startswith('_') and default() documented_only : false Options expression A Python expression that is evaluated given the variables name , obj and default and is expected to return a boolean to indicate whether the docspec.ApiObject should be kept or removed. If specified, the expression is the ultimate truth for determining the keep-or-remove state of a node. Using 'default()' as the expression has the same semantic as not specifying this field. Default: null documented_only Keep only API objects that have docstrings. Default: true exclude_private Exclude API objects that appear to be private members (i.e. their name begins with and underscore but does not end with one). Default: true exclude_special Exclude special members (e.g. __path__ , __annotations__ , __name__ and __all__ ). Default: true do_not_filter_modules Do not filter docspec.Module objects. Default: true skip_empty_modules Skip modules with no content. Default: false . Module: pydoc_markdown.contrib.processors.google Class GoogleProcessor @dataclasses . dataclass class GoogleProcessor ( Processor ) [view_source] This class implements the preprocessor for Google and PEP 257 docstrings. It converts docstrings formatted in the Google docstyle to Markdown syntax. References : https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html https://www.python.org/dev/peps/pep-0257/ Example : Attributes: module_level_variable1 (int): Module level variables may be documented in either the ``Attributes`` section of the module docstring, or in an inline docstring immediately following the variable. Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it. Todo: * For module TODOs * You have to also use ``sphinx.ext.todo`` extension Renders as: Attributes : module_level_variable1 int - Module level variables may be documented in either the Attributes section of the module docstring, or in an inline docstring immediately following the variable. Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it. Todo : For module TODOs You have to also use sphinx.ext.todo extension Module: pydoc_markdown.contrib.processors.pydocmd Class PydocmdProcessor @dataclasses . dataclass class PydocmdProcessor ( Processor ) [view_source] The Pydoc-Markdown processor for Markdown docstrings. This processor parses docstrings formatted like the examples below and turns them into proper Markdown markup. Examples: # Arguments arg1 (int): The first argument. kwargs (dict): Keyword arguments. # Raises RuntimeError: If something bad happens. ValueError: If an invalid argument is specified. # Returns A value. Renders as: Arguments arg1 ( int ): The first argument. kwargs ( dict ): Keyword arguments. Raises RuntimeError : If something bad happens. ValueError : If an invalid argument is specified. Returns A value. Module: pydoc_markdown.contrib.processors.smart Class SmartProcessor @dataclasses . dataclass class SmartProcessor ( Processor ) [view_source] This processor picks the GoogleProcessor , SphinxProcessor or PydocmdProcessor after guessing which is appropriate from the syntax it finds in the docstring. Module: pydoc_markdown.contrib.processors.sphinx Class SphinxProcessor @dataclasses . dataclass class SphinxProcessor ( Processor ) [view_source] This processor parses ReST/Sphinx-style function documentation and converts it into Markdown syntax. Example: **Arguments**: - `arg1`: This is the first argument. - `arg1`: This is the first argument. **Raises**: - `ValueError`: If *arg1* is a bad value. - `ValueError`: If *arg1* is a bad value. **Returns**: An `int` that represents an interesting value. Renders as:","title":"contrib.processors"},{"location":"api/pydoc_markdown/processors/#pydoc_markdowncontribprocessors","text":"Module: pydoc_markdown.contrib.processors.crossref","title":"pydoc_markdown.contrib.processors"},{"location":"api/pydoc_markdown/processors/#class-crossrefprocessor","text":"@dataclasses . dataclass class CrossrefProcessor ( Processor ) [view_source] Finds references to other objects in Markdown docstrings and produces links to other pages. The links are provided by the current Renderer via the Resolver interface. Note : This processor is a work in progress, and most of the time it just converts references into inline-code. The syntax for cross references is as follows: This is a ref to another class: [PydocmdProcessor](#pydoc:pydoc_markdown.contrib.processors.pydocmd.PydocmdProcessor) You can rename a ref like `this`~PydocmdProcessor And you can append to the ref name like this: [PydocmdProcessors](#pydoc:pydoc_markdown.contrib.processors.pydocmd.PydocmdProcessor) Renders as This is a ref to another class: PydocmdProcessor You can rename a ref like this ~PydocmdProcessor And you can append to the ref name like this: PydocmdProcessors Example configuration: processors : - type : crossref","title":"Class CrossrefProcessor"},{"location":"api/pydoc_markdown/processors/#resolver_v2","text":"If specified, it will be used instead of the resolver passed to process() and the generated Markdown code for the reference uses Novella {@link } syntax. Module: pydoc_markdown.contrib.processors.filter","title":"resolver_v2"},{"location":"api/pydoc_markdown/processors/#class-filterprocessor","text":"@dataclasses . dataclass class FilterProcessor ( Processor ) [view_source] The filter processor removes module and class members based on certain criteria. Example configuration: - type : filter expression : not name.startswith('_') and default() documented_only : false","title":"Class FilterProcessor"},{"location":"api/pydoc_markdown/processors/#options","text":"","title":"Options"},{"location":"api/pydoc_markdown/processors/#expression","text":"A Python expression that is evaluated given the variables name , obj and default and is expected to return a boolean to indicate whether the docspec.ApiObject should be kept or removed. If specified, the expression is the ultimate truth for determining the keep-or-remove state of a node. Using 'default()' as the expression has the same semantic as not specifying this field. Default: null","title":"expression"},{"location":"api/pydoc_markdown/processors/#documented_only","text":"Keep only API objects that have docstrings. Default: true","title":"documented_only"},{"location":"api/pydoc_markdown/processors/#exclude_private","text":"Exclude API objects that appear to be private members (i.e. their name begins with and underscore but does not end with one). Default: true","title":"exclude_private"},{"location":"api/pydoc_markdown/processors/#exclude_special","text":"Exclude special members (e.g. __path__ , __annotations__ , __name__ and __all__ ). Default: true","title":"exclude_special"},{"location":"api/pydoc_markdown/processors/#do_not_filter_modules","text":"Do not filter docspec.Module objects. Default: true","title":"do_not_filter_modules"},{"location":"api/pydoc_markdown/processors/#skip_empty_modules","text":"Skip modules with no content. Default: false . Module: pydoc_markdown.contrib.processors.google","title":"skip_empty_modules"},{"location":"api/pydoc_markdown/processors/#class-googleprocessor","text":"@dataclasses . dataclass class GoogleProcessor ( Processor ) [view_source] This class implements the preprocessor for Google and PEP 257 docstrings. It converts docstrings formatted in the Google docstyle to Markdown syntax. References : https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html https://www.python.org/dev/peps/pep-0257/ Example : Attributes: module_level_variable1 (int): Module level variables may be documented in either the ``Attributes`` section of the module docstring, or in an inline docstring immediately following the variable. Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it. Todo: * For module TODOs * You have to also use ``sphinx.ext.todo`` extension Renders as: Attributes : module_level_variable1 int - Module level variables may be documented in either the Attributes section of the module docstring, or in an inline docstring immediately following the variable. Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it. Todo : For module TODOs You have to also use sphinx.ext.todo extension Module: pydoc_markdown.contrib.processors.pydocmd","title":"Class GoogleProcessor"},{"location":"api/pydoc_markdown/processors/#class-pydocmdprocessor","text":"@dataclasses . dataclass class PydocmdProcessor ( Processor ) [view_source] The Pydoc-Markdown processor for Markdown docstrings. This processor parses docstrings formatted like the examples below and turns them into proper Markdown markup. Examples: # Arguments arg1 (int): The first argument. kwargs (dict): Keyword arguments. # Raises RuntimeError: If something bad happens. ValueError: If an invalid argument is specified. # Returns A value. Renders as: Arguments arg1 ( int ): The first argument. kwargs ( dict ): Keyword arguments. Raises RuntimeError : If something bad happens. ValueError : If an invalid argument is specified. Returns A value. Module: pydoc_markdown.contrib.processors.smart","title":"Class PydocmdProcessor"},{"location":"api/pydoc_markdown/processors/#class-smartprocessor","text":"@dataclasses . dataclass class SmartProcessor ( Processor ) [view_source] This processor picks the GoogleProcessor , SphinxProcessor or PydocmdProcessor after guessing which is appropriate from the syntax it finds in the docstring. Module: pydoc_markdown.contrib.processors.sphinx","title":"Class SmartProcessor"},{"location":"api/pydoc_markdown/processors/#class-sphinxprocessor","text":"@dataclasses . dataclass class SphinxProcessor ( Processor ) [view_source] This processor parses ReST/Sphinx-style function documentation and converts it into Markdown syntax. Example: **Arguments**: - `arg1`: This is the first argument. - `arg1`: This is the first argument. **Raises**: - `ValueError`: If *arg1* is a bad value. - `ValueError`: If *arg1* is a bad value. **Returns**: An `int` that represents an interesting value. Renders as:","title":"Class SphinxProcessor"},{"location":"api/pydoc_markdown/renderers/docusaurus/","text":"Class CustomizedMarkdownRenderer @dataclasses . dataclass class CustomizedMarkdownRenderer ( MarkdownRenderer ) [view_source] We override some defaults in this subclass. insert_header_anchors Disabled because Docusaurus supports this automatically. escape_html_in_docstring Escape html in docstring, otherwise it could lead to invalid html. render_module_header_template Conforms to Docusaurus header format. Class DocusaurusRenderer @dataclasses . dataclass class DocusaurusRenderer ( Renderer ) [view_source] Produces Markdown files and a sidebar.json file for use in a Docusaurus v2 websites. It creates files in a fixed layout that reflects the structure of the documented packages. The files will be rendered into the directory specified with the docs_base_path option. Check out the complete Docusaurus example on GitHub . Options markdown The MarkdownRenderer configuration. docs_base_path The path where the docusaurus docs content is. Defaults \"docs\" folder. relative_output_path The output path inside the docs_base_path folder, used to output the module reference. relative_sidebar_path The sidebar path inside the docs_base_path folder, used to output the sidebar for the module reference. sidebar_top_level_label The top-level label in the sidebar. Default to 'Reference'. Can be set to null to remove the sidebar top-level all together. This option assumes that there is only one top-level module. sidebar_top_level_module_label The top-level module label in the sidebar. Default to null, meaning that the actual module name will be used. This option assumes that there is only one top-level module.","title":"docusaurus"},{"location":"api/pydoc_markdown/renderers/docusaurus/#class-customizedmarkdownrenderer","text":"@dataclasses . dataclass class CustomizedMarkdownRenderer ( MarkdownRenderer ) [view_source] We override some defaults in this subclass.","title":"Class CustomizedMarkdownRenderer"},{"location":"api/pydoc_markdown/renderers/docusaurus/#insert_header_anchors","text":"Disabled because Docusaurus supports this automatically.","title":"insert_header_anchors"},{"location":"api/pydoc_markdown/renderers/docusaurus/#escape_html_in_docstring","text":"Escape html in docstring, otherwise it could lead to invalid html.","title":"escape_html_in_docstring"},{"location":"api/pydoc_markdown/renderers/docusaurus/#render_module_header_template","text":"Conforms to Docusaurus header format.","title":"render_module_header_template"},{"location":"api/pydoc_markdown/renderers/docusaurus/#class-docusaurusrenderer","text":"@dataclasses . dataclass class DocusaurusRenderer ( Renderer ) [view_source] Produces Markdown files and a sidebar.json file for use in a Docusaurus v2 websites. It creates files in a fixed layout that reflects the structure of the documented packages. The files will be rendered into the directory specified with the docs_base_path option. Check out the complete Docusaurus example on GitHub .","title":"Class DocusaurusRenderer"},{"location":"api/pydoc_markdown/renderers/docusaurus/#options","text":"","title":"Options"},{"location":"api/pydoc_markdown/renderers/docusaurus/#markdown","text":"The MarkdownRenderer configuration.","title":"markdown"},{"location":"api/pydoc_markdown/renderers/docusaurus/#docs_base_path","text":"The path where the docusaurus docs content is. Defaults \"docs\" folder.","title":"docs_base_path"},{"location":"api/pydoc_markdown/renderers/docusaurus/#relative_output_path","text":"The output path inside the docs_base_path folder, used to output the module reference.","title":"relative_output_path"},{"location":"api/pydoc_markdown/renderers/docusaurus/#relative_sidebar_path","text":"The sidebar path inside the docs_base_path folder, used to output the sidebar for the module reference.","title":"relative_sidebar_path"},{"location":"api/pydoc_markdown/renderers/docusaurus/#sidebar_top_level_label","text":"The top-level label in the sidebar. Default to 'Reference'. Can be set to null to remove the sidebar top-level all together. This option assumes that there is only one top-level module.","title":"sidebar_top_level_label"},{"location":"api/pydoc_markdown/renderers/docusaurus/#sidebar_top_level_module_label","text":"The top-level module label in the sidebar. Default to null, meaning that the actual module name will be used. This option assumes that there is only one top-level module.","title":"sidebar_top_level_module_label"},{"location":"api/pydoc_markdown/renderers/hugo/","text":"Class HugoPage @dataclasses . dataclass class HugoPage ( Page [ \"HugoPage\" ]) [view_source] A subclass of {@link pydoc:pydoc_markdown.util.pages.Page} which adds Hugo-specific overrides. Options preamble The Hugo preamble of the page. This is merged with the HugoRenderer.default_preamble . directory Override the directory that this page is rendered into (relative to the content directory). Defaults to null . Class HugoConfig @dataclasses . dataclass class HugoConfig () [view_source] Represents the Hugo configuration file that is rendered into the build directory. Options title Title of the site. This is a mandatory field. theme The theme of the site. This is a mandatory field. It must be a string, a HugoThemePath or a HugoThemeGitUrl object. Examples: theme: antarctica theme: {clone_url: \"https://github.com/alex-shpak/hugo-book.git\"} theme: docs/hugo-theme/ baseURL Base URL. serverURL Server URL. Default: 127.0.0.1 aka localhost serverPort Server Port. Default: 1313 languageCode Language code. Default: en-us additional_options This field collects all remaining options that do not match any of the above and will be forwarded directly into the Hugo config.yaml when it is rendered into the build directory. Class HugoRenderer @dataclasses . dataclass class HugoRenderer ( Renderer , Server , Builder ) [view_source] A renderer that produces Markdown files compatible with Hugo . The --bootstrap hugo option can be used to create a Pydoc-Markdown configuration file with the Hugo template. Adds a YAML preamble to every generated Markdown file. Produces files in a layout suitable for Hugo (e.g. _index.md files). Produces a config.yaml if config is not set to null . Can be used with the Pydoc-Markdown --server option to live-preview the generated docs. Downloads a suitable Hugo binary from Github if Hugo is not already installed (see get_hugo ). Example configuration: renderer : type : hugo config : title : My Project theme : { clone_url : \"https://github.com/alex-shpak/hugo-book.git\" } # The \"book\" theme only renders pages in \"content/docs\" into the nav. content_directory : content/docs default_preamble : { menu : main } pages : - title : Home name : index source : README.md - title : API Documentation contents : - '*' Options build_directory The directory where all generated files are placed. Default: build/docs content_directory The directory inside the build directory where the generated pages are written to. Default: content clean_render Clean up files that were previously generated by the renderer before the next render pass. Defaults to True . pages The pages to render. default_preamble The default Hugo preamble that is applied to every page. Example: default_preamble: menu: main markdown The MarkdownRenderer configuration. config The contents of the Hugo config.toml file as YAML. This can be set to null in order to not produce the config.toml file in the build_directory . Must be deserializable into a HugoConfig . get_hugo Options for when the Hugo binary is not present and should be downloaded automatically. Example: get_hugo: enabled: true version: '0.71' extended: true install_hugo def install_hugo ( to : str , version : str = None , extended : bool = True ) -> None [view_source] Downloads the latest release of Hugo from Github and places it at the path specified by to . This will install the extended version if it is available and extended is set to True . Arguments : to : The file to write the Hugo binary to. version : The Hugo version to get. If not specified, the latest release will be used. extended : Whether to download the \"Hugo extended\" version. Defaults to True. get_github_releases def get_github_releases ( repo : str ) -> t . Generator [ dict , None , None ] [view_source] Returns an iterator for all releases of a Github repository. parse_links_header def parse_links_header ( link_header : str ) -> t . Dict [ str , str ] [view_source] Parses the Link HTTP header and returns a map of the links. Logic from PageLinks.java .","title":"hugo"},{"location":"api/pydoc_markdown/renderers/hugo/#class-hugopage","text":"@dataclasses . dataclass class HugoPage ( Page [ \"HugoPage\" ]) [view_source] A subclass of {@link pydoc:pydoc_markdown.util.pages.Page} which adds Hugo-specific overrides.","title":"Class HugoPage"},{"location":"api/pydoc_markdown/renderers/hugo/#options","text":"","title":"Options"},{"location":"api/pydoc_markdown/renderers/hugo/#preamble","text":"The Hugo preamble of the page. This is merged with the HugoRenderer.default_preamble .","title":"preamble"},{"location":"api/pydoc_markdown/renderers/hugo/#directory","text":"Override the directory that this page is rendered into (relative to the content directory). Defaults to null .","title":"directory"},{"location":"api/pydoc_markdown/renderers/hugo/#class-hugoconfig","text":"@dataclasses . dataclass class HugoConfig () [view_source] Represents the Hugo configuration file that is rendered into the build directory.","title":"Class HugoConfig"},{"location":"api/pydoc_markdown/renderers/hugo/#options_1","text":"","title":"Options"},{"location":"api/pydoc_markdown/renderers/hugo/#title","text":"Title of the site. This is a mandatory field.","title":"title"},{"location":"api/pydoc_markdown/renderers/hugo/#theme","text":"The theme of the site. This is a mandatory field. It must be a string, a HugoThemePath or a HugoThemeGitUrl object. Examples: theme: antarctica theme: {clone_url: \"https://github.com/alex-shpak/hugo-book.git\"} theme: docs/hugo-theme/","title":"theme"},{"location":"api/pydoc_markdown/renderers/hugo/#baseurl","text":"Base URL.","title":"baseURL"},{"location":"api/pydoc_markdown/renderers/hugo/#serverurl","text":"Server URL. Default: 127.0.0.1 aka localhost","title":"serverURL"},{"location":"api/pydoc_markdown/renderers/hugo/#serverport","text":"Server Port. Default: 1313","title":"serverPort"},{"location":"api/pydoc_markdown/renderers/hugo/#languagecode","text":"Language code. Default: en-us","title":"languageCode"},{"location":"api/pydoc_markdown/renderers/hugo/#additional_options","text":"This field collects all remaining options that do not match any of the above and will be forwarded directly into the Hugo config.yaml when it is rendered into the build directory.","title":"additional_options"},{"location":"api/pydoc_markdown/renderers/hugo/#class-hugorenderer","text":"@dataclasses . dataclass class HugoRenderer ( Renderer , Server , Builder ) [view_source] A renderer that produces Markdown files compatible with Hugo . The --bootstrap hugo option can be used to create a Pydoc-Markdown configuration file with the Hugo template. Adds a YAML preamble to every generated Markdown file. Produces files in a layout suitable for Hugo (e.g. _index.md files). Produces a config.yaml if config is not set to null . Can be used with the Pydoc-Markdown --server option to live-preview the generated docs. Downloads a suitable Hugo binary from Github if Hugo is not already installed (see get_hugo ). Example configuration: renderer : type : hugo config : title : My Project theme : { clone_url : \"https://github.com/alex-shpak/hugo-book.git\" } # The \"book\" theme only renders pages in \"content/docs\" into the nav. content_directory : content/docs default_preamble : { menu : main } pages : - title : Home name : index source : README.md - title : API Documentation contents : - '*'","title":"Class HugoRenderer"},{"location":"api/pydoc_markdown/renderers/hugo/#options_2","text":"","title":"Options"},{"location":"api/pydoc_markdown/renderers/hugo/#build_directory","text":"The directory where all generated files are placed. Default: build/docs","title":"build_directory"},{"location":"api/pydoc_markdown/renderers/hugo/#content_directory","text":"The directory inside the build directory where the generated pages are written to. Default: content","title":"content_directory"},{"location":"api/pydoc_markdown/renderers/hugo/#clean_render","text":"Clean up files that were previously generated by the renderer before the next render pass. Defaults to True .","title":"clean_render"},{"location":"api/pydoc_markdown/renderers/hugo/#pages","text":"The pages to render.","title":"pages"},{"location":"api/pydoc_markdown/renderers/hugo/#default_preamble","text":"The default Hugo preamble that is applied to every page. Example: default_preamble: menu: main","title":"default_preamble"},{"location":"api/pydoc_markdown/renderers/hugo/#markdown","text":"The MarkdownRenderer configuration.","title":"markdown"},{"location":"api/pydoc_markdown/renderers/hugo/#config","text":"The contents of the Hugo config.toml file as YAML. This can be set to null in order to not produce the config.toml file in the build_directory . Must be deserializable into a HugoConfig .","title":"config"},{"location":"api/pydoc_markdown/renderers/hugo/#get_hugo","text":"Options for when the Hugo binary is not present and should be downloaded automatically. Example: get_hugo: enabled: true version: '0.71' extended: true","title":"get_hugo"},{"location":"api/pydoc_markdown/renderers/hugo/#install_hugo","text":"def install_hugo ( to : str , version : str = None , extended : bool = True ) -> None [view_source] Downloads the latest release of Hugo from Github and places it at the path specified by to . This will install the extended version if it is available and extended is set to True . Arguments : to : The file to write the Hugo binary to. version : The Hugo version to get. If not specified, the latest release will be used. extended : Whether to download the \"Hugo extended\" version. Defaults to True.","title":"install_hugo"},{"location":"api/pydoc_markdown/renderers/hugo/#get_github_releases","text":"def get_github_releases ( repo : str ) -> t . Generator [ dict , None , None ] [view_source] Returns an iterator for all releases of a Github repository.","title":"get_github_releases"},{"location":"api/pydoc_markdown/renderers/hugo/#parse_links_header","text":"def parse_links_header ( link_header : str ) -> t . Dict [ str , str ] [view_source] Parses the Link HTTP header and returns a map of the links. Logic from PageLinks.java .","title":"parse_links_header"},{"location":"api/pydoc_markdown/renderers/jinja2/","text":"at any point on future Pydoc-Markdown versions. Class RenderBlock @D . dataclass class RenderBlock () [view_source] template The path to the Jinja2 template that is used to render the output files. produces A mapping for filename (without suffix) to a list of Module selectors. jinja2_environment_settings Settings for the Jinja2 Environment. Class Jinja2Renderer @D . dataclass class Jinja2Renderer ( Renderer ) [view_source] renders Render instructions. build_directory Build directory where all the files are produced.","title":"jinja2"},{"location":"api/pydoc_markdown/renderers/jinja2/#class-renderblock","text":"@D . dataclass class RenderBlock () [view_source]","title":"Class RenderBlock"},{"location":"api/pydoc_markdown/renderers/jinja2/#template","text":"The path to the Jinja2 template that is used to render the output files.","title":"template"},{"location":"api/pydoc_markdown/renderers/jinja2/#produces","text":"A mapping for filename (without suffix) to a list of Module selectors.","title":"produces"},{"location":"api/pydoc_markdown/renderers/jinja2/#jinja2_environment_settings","text":"Settings for the Jinja2 Environment.","title":"jinja2_environment_settings"},{"location":"api/pydoc_markdown/renderers/jinja2/#class-jinja2renderer","text":"@D . dataclass class Jinja2Renderer ( Renderer ) [view_source]","title":"Class Jinja2Renderer"},{"location":"api/pydoc_markdown/renderers/jinja2/#renders","text":"Render instructions.","title":"renders"},{"location":"api/pydoc_markdown/renderers/jinja2/#build_directory","text":"Build directory where all the files are produced.","title":"build_directory"},{"location":"api/pydoc_markdown/renderers/markdown/","text":"Class MarkdownRenderer @dataclasses . dataclass class MarkdownRenderer ( Renderer , SinglePageRenderer , SingleObjectRenderer ) [view_source] Produces Markdown files. This renderer is often used by other renderers, such as MkdocsRenderer and HugoRenderer . It provides a wide variety of options to customize the generated Markdown files. Options filename The name of the file to render to. If no file is specified, it will render to stdout. encoding The encoding of the output file. This is ignored when rendering to stdout. insert_header_anchors If enabled, inserts anchors before Markdown headers to ensure that links to the header work. This is enabled by default. html_headers Generate HTML headers instead of Mearkdown headers. This is disabled by default. code_headers Render names in headers as code (using backticks or <code> tags, depending on html_headers ). This is enabled by default. descriptive_class_title Generate descriptive class titles by adding the word \"Objects\" if set to True . Otherwise, it can be a string that is appended or prepended (appended if the string begins with $ ). the class name. This is enabled by default. descriptive_module_title Generate descriptivie module titles by adding the word \"Module\" before the module name. This is enabled by default. add_module_prefix Add the module name as a prefix to class & method names. This module name is also rendered as code if code_headers is enabled. This is enabled by default. add_method_class_prefix Add the class name as a prefix to method names. This class name is also rendered as code if code_headers is enabled. This is enabled by default. add_member_class_prefix Add the class name as a prefix to member names. This is enabled by default. add_full_prefix Add the full module name as a prefix to the title of the header. This is disabled by default. sub_prefix If add_full_prefix is enabled, this will result in the prefix to be wrapped in a <sub> tag. data_code_block Render the definition of data members as a code block. This is disabled by default. data_expression_maxlength Max length of expressions. If this limit is exceeded, the remaining characters will be replaced with three dots. This is set to 100 by default. classdef_code_block Render the class signature as a code block. This includes the \"class\" keyword, the class name and its bases. This is enabled by default. classdef_with_decorators Render decorators before class definitions. signature_python_help_style Render classdef and function signature blocks in the Python help() style. signature_code_block Render the function signature as a code block. This includes the \"def\" keyword, the function name and its arguments. This is enabled by default. signature_in_header Render the function signature in the header. This is disabled by default. signature_with_vertical_bar Render the vertical bar '|' before function signature. This is enabled by default. signature_with_def Include the \"def\" keyword in the function signature. This is enabled by default. signature_class_prefix Render the class name in the code block for function signature. Note that this results in invalid Python syntax to be rendered. This is disabled by default. signature_with_decorators Render decorators before function definitions. render_typehint_in_data_header Render type hints for data elements in the header. code_lang Add the string \"python\" after the backticks for code blocks. This is enabled by default. render_page_title Render title of page at the beginning of the file. render_toc Render a table of contents at the beginning of the file. render_toc_title The title of the \"Table of Contents\" header. toc_maxdepth The maximum depth of the table of contents. Defaults to 2. render_module_header Render module headers. This is enabled by default. render_module_header_template Custom template for module header. docstrings_as_blockquote Render docstrings as blockquotes. This is disabled by default. use_fixed_header_levels Use a fixed header level for every kind of API object. The individual levels can be defined with header_level_by_type . header_level_by_type Fixed header levels by API object type. source_linker A plugin that implements the SourceLinker interface to provide links to the source code of API objects. If this field is specified, the renderer will place links to the source code in the generated Markdown files. source_format Allows you to override how the \"view source\" link is rendered into the Markdown file if a source_linker is configured. The default is [[view_source]]({url}) . escape_html_in_docstring Escape html in docstring. Default to False. render_novella_anchors Render Novella @anchor tags before headings. format_code Format code rendered into Markdown code blocks with YAPF. format_code_style The style to format code as. This can be a YAPF builtin style name or point to a file relative to the context directory (usually the working directory). get_resolver def get_resolver ( modules : t . List [ docspec . Module ]) -> t . Optional [ Resolver ] [view_source] Returns a simple Resolver implementation. Finds cross-references in the same file. Class MarkdownReferenceResolver @dataclasses . dataclass class MarkdownReferenceResolver ( Resolver , ResolverV2 ) [view_source] resolve_reference def resolve_reference ( suite : ApiSuite , scope : docspec . ApiObject , ref : str ) -> t . Optional [ docspec . ApiObject ] [view_source] Resolves the reference by searching in the members of scope or any of its parents.","title":"markdown"},{"location":"api/pydoc_markdown/renderers/markdown/#class-markdownrenderer","text":"@dataclasses . dataclass class MarkdownRenderer ( Renderer , SinglePageRenderer , SingleObjectRenderer ) [view_source] Produces Markdown files. This renderer is often used by other renderers, such as MkdocsRenderer and HugoRenderer . It provides a wide variety of options to customize the generated Markdown files.","title":"Class MarkdownRenderer"},{"location":"api/pydoc_markdown/renderers/markdown/#options","text":"","title":"Options"},{"location":"api/pydoc_markdown/renderers/markdown/#filename","text":"The name of the file to render to. If no file is specified, it will render to stdout.","title":"filename"},{"location":"api/pydoc_markdown/renderers/markdown/#encoding","text":"The encoding of the output file. This is ignored when rendering to stdout.","title":"encoding"},{"location":"api/pydoc_markdown/renderers/markdown/#insert_header_anchors","text":"If enabled, inserts anchors before Markdown headers to ensure that links to the header work. This is enabled by default.","title":"insert_header_anchors"},{"location":"api/pydoc_markdown/renderers/markdown/#html_headers","text":"Generate HTML headers instead of Mearkdown headers. This is disabled by default.","title":"html_headers"},{"location":"api/pydoc_markdown/renderers/markdown/#code_headers","text":"Render names in headers as code (using backticks or <code> tags, depending on html_headers ). This is enabled by default.","title":"code_headers"},{"location":"api/pydoc_markdown/renderers/markdown/#descriptive_class_title","text":"Generate descriptive class titles by adding the word \"Objects\" if set to True . Otherwise, it can be a string that is appended or prepended (appended if the string begins with $ ). the class name. This is enabled by default.","title":"descriptive_class_title"},{"location":"api/pydoc_markdown/renderers/markdown/#descriptive_module_title","text":"Generate descriptivie module titles by adding the word \"Module\" before the module name. This is enabled by default.","title":"descriptive_module_title"},{"location":"api/pydoc_markdown/renderers/markdown/#add_module_prefix","text":"Add the module name as a prefix to class & method names. This module name is also rendered as code if code_headers is enabled. This is enabled by default.","title":"add_module_prefix"},{"location":"api/pydoc_markdown/renderers/markdown/#add_method_class_prefix","text":"Add the class name as a prefix to method names. This class name is also rendered as code if code_headers is enabled. This is enabled by default.","title":"add_method_class_prefix"},{"location":"api/pydoc_markdown/renderers/markdown/#add_member_class_prefix","text":"Add the class name as a prefix to member names. This is enabled by default.","title":"add_member_class_prefix"},{"location":"api/pydoc_markdown/renderers/markdown/#add_full_prefix","text":"Add the full module name as a prefix to the title of the header. This is disabled by default.","title":"add_full_prefix"},{"location":"api/pydoc_markdown/renderers/markdown/#sub_prefix","text":"If add_full_prefix is enabled, this will result in the prefix to be wrapped in a <sub> tag.","title":"sub_prefix"},{"location":"api/pydoc_markdown/renderers/markdown/#data_code_block","text":"Render the definition of data members as a code block. This is disabled by default.","title":"data_code_block"},{"location":"api/pydoc_markdown/renderers/markdown/#data_expression_maxlength","text":"Max length of expressions. If this limit is exceeded, the remaining characters will be replaced with three dots. This is set to 100 by default.","title":"data_expression_maxlength"},{"location":"api/pydoc_markdown/renderers/markdown/#classdef_code_block","text":"Render the class signature as a code block. This includes the \"class\" keyword, the class name and its bases. This is enabled by default.","title":"classdef_code_block"},{"location":"api/pydoc_markdown/renderers/markdown/#classdef_with_decorators","text":"Render decorators before class definitions.","title":"classdef_with_decorators"},{"location":"api/pydoc_markdown/renderers/markdown/#signature_python_help_style","text":"Render classdef and function signature blocks in the Python help() style.","title":"signature_python_help_style"},{"location":"api/pydoc_markdown/renderers/markdown/#signature_code_block","text":"Render the function signature as a code block. This includes the \"def\" keyword, the function name and its arguments. This is enabled by default.","title":"signature_code_block"},{"location":"api/pydoc_markdown/renderers/markdown/#signature_in_header","text":"Render the function signature in the header. This is disabled by default.","title":"signature_in_header"},{"location":"api/pydoc_markdown/renderers/markdown/#signature_with_vertical_bar","text":"Render the vertical bar '|' before function signature. This is enabled by default.","title":"signature_with_vertical_bar"},{"location":"api/pydoc_markdown/renderers/markdown/#signature_with_def","text":"Include the \"def\" keyword in the function signature. This is enabled by default.","title":"signature_with_def"},{"location":"api/pydoc_markdown/renderers/markdown/#signature_class_prefix","text":"Render the class name in the code block for function signature. Note that this results in invalid Python syntax to be rendered. This is disabled by default.","title":"signature_class_prefix"},{"location":"api/pydoc_markdown/renderers/markdown/#signature_with_decorators","text":"Render decorators before function definitions.","title":"signature_with_decorators"},{"location":"api/pydoc_markdown/renderers/markdown/#render_typehint_in_data_header","text":"Render type hints for data elements in the header.","title":"render_typehint_in_data_header"},{"location":"api/pydoc_markdown/renderers/markdown/#code_lang","text":"Add the string \"python\" after the backticks for code blocks. This is enabled by default.","title":"code_lang"},{"location":"api/pydoc_markdown/renderers/markdown/#render_page_title","text":"Render title of page at the beginning of the file.","title":"render_page_title"},{"location":"api/pydoc_markdown/renderers/markdown/#render_toc","text":"Render a table of contents at the beginning of the file.","title":"render_toc"},{"location":"api/pydoc_markdown/renderers/markdown/#render_toc_title","text":"The title of the \"Table of Contents\" header.","title":"render_toc_title"},{"location":"api/pydoc_markdown/renderers/markdown/#toc_maxdepth","text":"The maximum depth of the table of contents. Defaults to 2.","title":"toc_maxdepth"},{"location":"api/pydoc_markdown/renderers/markdown/#render_module_header","text":"Render module headers. This is enabled by default.","title":"render_module_header"},{"location":"api/pydoc_markdown/renderers/markdown/#render_module_header_template","text":"Custom template for module header.","title":"render_module_header_template"},{"location":"api/pydoc_markdown/renderers/markdown/#docstrings_as_blockquote","text":"Render docstrings as blockquotes. This is disabled by default.","title":"docstrings_as_blockquote"},{"location":"api/pydoc_markdown/renderers/markdown/#use_fixed_header_levels","text":"Use a fixed header level for every kind of API object. The individual levels can be defined with header_level_by_type .","title":"use_fixed_header_levels"},{"location":"api/pydoc_markdown/renderers/markdown/#header_level_by_type","text":"Fixed header levels by API object type.","title":"header_level_by_type"},{"location":"api/pydoc_markdown/renderers/markdown/#source_linker","text":"A plugin that implements the SourceLinker interface to provide links to the source code of API objects. If this field is specified, the renderer will place links to the source code in the generated Markdown files.","title":"source_linker"},{"location":"api/pydoc_markdown/renderers/markdown/#source_format","text":"Allows you to override how the \"view source\" link is rendered into the Markdown file if a source_linker is configured. The default is [[view_source]]({url}) .","title":"source_format"},{"location":"api/pydoc_markdown/renderers/markdown/#escape_html_in_docstring","text":"Escape html in docstring. Default to False.","title":"escape_html_in_docstring"},{"location":"api/pydoc_markdown/renderers/markdown/#render_novella_anchors","text":"Render Novella @anchor tags before headings.","title":"render_novella_anchors"},{"location":"api/pydoc_markdown/renderers/markdown/#format_code","text":"Format code rendered into Markdown code blocks with YAPF.","title":"format_code"},{"location":"api/pydoc_markdown/renderers/markdown/#format_code_style","text":"The style to format code as. This can be a YAPF builtin style name or point to a file relative to the context directory (usually the working directory).","title":"format_code_style"},{"location":"api/pydoc_markdown/renderers/markdown/#get_resolver","text":"def get_resolver ( modules : t . List [ docspec . Module ]) -> t . Optional [ Resolver ] [view_source] Returns a simple Resolver implementation. Finds cross-references in the same file.","title":"get_resolver"},{"location":"api/pydoc_markdown/renderers/markdown/#class-markdownreferenceresolver","text":"@dataclasses . dataclass class MarkdownReferenceResolver ( Resolver , ResolverV2 ) [view_source]","title":"Class MarkdownReferenceResolver"},{"location":"api/pydoc_markdown/renderers/markdown/#resolve_reference","text":"def resolve_reference ( suite : ApiSuite , scope : docspec . ApiObject , ref : str ) -> t . Optional [ docspec . ApiObject ] [view_source] Resolves the reference by searching in the members of scope or any of its parents.","title":"resolve_reference"},{"location":"api/pydoc_markdown/renderers/mkdocs/","text":"Class CustomizedMarkdownRenderer @dataclasses . dataclass class CustomizedMarkdownRenderer ( MarkdownRenderer ) [view_source] We override some defaults in this subclass. Class MkdocsRenderer @dataclasses . dataclass class MkdocsRenderer ( Renderer , Server , Builder ) [view_source] Produces Markdown files in a layout compatible with [MkDocs][0] and can be used with the Pydoc-Markdown --server option for a live-preview. The --bootstrap mkdocs option can be used to create a Pydoc-Markdown configuration file with the MkDocs template. Example configuration: renderer : type : mkdocs pages : - title : Home name : index source : README.md - title : API Documentation contents : - '*' mkdocs_config : site_name : My Project theme : readthedocs Options output_directory The output directory for the generated Markdown files. Defaults to build/docs . content_directory_name Name of the content directory (inside the output_directory ). Defaults to \"content\". clean_render Remove files generated in a previous pass by the Mkdocs renderer before rendering again. Defaults to True . site_name The name of the site. This will be carried into the site_name key of the mkdocs_config . mkdocs_config Arbitrary configuration values that will be rendered to an mkdocs.yml file. server_port Port for the Mkdocs server when using the pydoc-markdown --server option. Defaults to 8000 . Can be set with the MKDOCS_PORT environment variable: $ MKDOCS_PORT=8383 pydoc-markdown -so","title":"mkdocs"},{"location":"api/pydoc_markdown/renderers/mkdocs/#class-customizedmarkdownrenderer","text":"@dataclasses . dataclass class CustomizedMarkdownRenderer ( MarkdownRenderer ) [view_source] We override some defaults in this subclass.","title":"Class CustomizedMarkdownRenderer"},{"location":"api/pydoc_markdown/renderers/mkdocs/#class-mkdocsrenderer","text":"@dataclasses . dataclass class MkdocsRenderer ( Renderer , Server , Builder ) [view_source] Produces Markdown files in a layout compatible with [MkDocs][0] and can be used with the Pydoc-Markdown --server option for a live-preview. The --bootstrap mkdocs option can be used to create a Pydoc-Markdown configuration file with the MkDocs template. Example configuration: renderer : type : mkdocs pages : - title : Home name : index source : README.md - title : API Documentation contents : - '*' mkdocs_config : site_name : My Project theme : readthedocs","title":"Class MkdocsRenderer"},{"location":"api/pydoc_markdown/renderers/mkdocs/#options","text":"","title":"Options"},{"location":"api/pydoc_markdown/renderers/mkdocs/#output_directory","text":"The output directory for the generated Markdown files. Defaults to build/docs .","title":"output_directory"},{"location":"api/pydoc_markdown/renderers/mkdocs/#content_directory_name","text":"Name of the content directory (inside the output_directory ). Defaults to \"content\".","title":"content_directory_name"},{"location":"api/pydoc_markdown/renderers/mkdocs/#clean_render","text":"Remove files generated in a previous pass by the Mkdocs renderer before rendering again. Defaults to True .","title":"clean_render"},{"location":"api/pydoc_markdown/renderers/mkdocs/#site_name","text":"The name of the site. This will be carried into the site_name key of the mkdocs_config .","title":"site_name"},{"location":"api/pydoc_markdown/renderers/mkdocs/#mkdocs_config","text":"Arbitrary configuration values that will be rendered to an mkdocs.yml file.","title":"mkdocs_config"},{"location":"api/pydoc_markdown/renderers/mkdocs/#server_port","text":"Port for the Mkdocs server when using the pydoc-markdown --server option. Defaults to 8000 . Can be set with the MKDOCS_PORT environment variable: $ MKDOCS_PORT=8383 pydoc-markdown -so","title":"server_port"}]}